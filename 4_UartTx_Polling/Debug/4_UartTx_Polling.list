
4_UartTx_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001678  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001840  08001840  00011840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001860  08001860  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001860  08001860  00011860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001868  08001868  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001868  08001868  00011868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800186c  0800186c  0001186c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  0800187c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  0800187c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000055fa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ec0  00000000  00000000  00025636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c8  00000000  00000000  000264f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  00026ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002522  00000000  00000000  00027070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000085e3  00000000  00000000  00029592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011fb3c  00000000  00000000  00031b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001516b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016d4  00000000  00000000  00151704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08001828 	.word	0x08001828

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08001828 	.word	0x08001828

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x34>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <HAL_Init+0x34>)
 8000526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800052a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_Init+0x34>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_Init+0x34>)
 8000532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000538:	2003      	movs	r0, #3
 800053a:	f000 f931 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800053e:	200f      	movs	r0, #15
 8000540:	f000 f808 	bl	8000554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000544:	f000 fb0c 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f93b 	bl	80007ee <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295
 8000590:	f000 f911 	bl	80007b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20000028 	.word	0x20000028

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028

080005f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff ffee 	bl	80005dc <HAL_GetTick>
 8000600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060c:	d005      	beq.n	800061a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_Delay+0x44>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800061a:	bf00      	nop
 800061c:	f7ff ffde 	bl	80005dc <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	429a      	cmp	r2, r3
 800062a:	d8f7      	bhi.n	800061c <HAL_Delay+0x28>
  {
  }
}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000004 	.word	0x20000004

0800063c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <__NVIC_SetPriorityGrouping+0x40>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 8000666:	4313      	orrs	r3, r2
 8000668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <__NVIC_SetPriorityGrouping+0x40>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	60d3      	str	r3, [r2, #12]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	05fa0000 	.word	0x05fa0000

08000684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <__NVIC_GetPriorityGrouping+0x18>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0307 	and.w	r3, r3, #7
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	; 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800076c:	d301      	bcc.n	8000772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076e:	2301      	movs	r3, #1
 8000770:	e00f      	b.n	8000792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <SysTick_Config+0x40>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077a:	210f      	movs	r1, #15
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f7ff ff8e 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SysTick_Config+0x40>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <SysTick_Config+0x40>)
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff47 	bl	800063c <__NVIC_SetPriorityGrouping>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c8:	f7ff ff5c 	bl	8000684 <__NVIC_GetPriorityGrouping>
 80007cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f7ff ff8e 	bl	80006f4 <NVIC_EncodePriority>
 80007d8:	4602      	mov	r2, r0
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff5d 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ffb0 	bl	800075c <SysTick_Config>
 80007fc:	4603      	mov	r3, r0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000808:	b480      	push	{r7}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
 8000826:	e175      	b.n	8000b14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000828:	2201      	movs	r2, #1
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	4013      	ands	r3, r2
 800083a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	429a      	cmp	r2, r3
 8000842:	f040 8164 	bne.w	8000b0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f003 0303 	and.w	r3, r3, #3
 800084e:	2b01      	cmp	r3, #1
 8000850:	d005      	beq.n	800085e <HAL_GPIO_Init+0x56>
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f003 0303 	and.w	r3, r3, #3
 800085a:	2b02      	cmp	r3, #2
 800085c:	d130      	bne.n	80008c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	2203      	movs	r2, #3
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	4013      	ands	r3, r2
 8000874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	68da      	ldr	r2, [r3, #12]
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	4313      	orrs	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000894:	2201      	movs	r2, #1
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	43db      	mvns	r3, r3
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	4013      	ands	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	091b      	lsrs	r3, r3, #4
 80008aa:	f003 0201 	and.w	r2, r3, #1
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f003 0303 	and.w	r3, r3, #3
 80008c8:	2b03      	cmp	r3, #3
 80008ca:	d017      	beq.n	80008fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	2203      	movs	r2, #3
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	4013      	ands	r3, r2
 80008e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f003 0303 	and.w	r3, r3, #3
 8000904:	2b02      	cmp	r3, #2
 8000906:	d123      	bne.n	8000950 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	08da      	lsrs	r2, r3, #3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3208      	adds	r2, #8
 8000910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	f003 0307 	and.w	r3, r3, #7
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	220f      	movs	r2, #15
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4013      	ands	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	691a      	ldr	r2, [r3, #16]
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4313      	orrs	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	08da      	lsrs	r2, r3, #3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3208      	adds	r2, #8
 800094a:	69b9      	ldr	r1, [r7, #24]
 800094c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	2203      	movs	r2, #3
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f003 0203 	and.w	r2, r3, #3
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4313      	orrs	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800098c:	2b00      	cmp	r3, #0
 800098e:	f000 80be 	beq.w	8000b0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b66      	ldr	r3, [pc, #408]	; (8000b2c <HAL_GPIO_Init+0x324>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a65      	ldr	r2, [pc, #404]	; (8000b2c <HAL_GPIO_Init+0x324>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b63      	ldr	r3, [pc, #396]	; (8000b2c <HAL_GPIO_Init+0x324>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80009aa:	4a61      	ldr	r2, [pc, #388]	; (8000b30 <HAL_GPIO_Init+0x328>)
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	3302      	adds	r3, #2
 80009b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f003 0303 	and.w	r3, r3, #3
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	220f      	movs	r2, #15
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a58      	ldr	r2, [pc, #352]	; (8000b34 <HAL_GPIO_Init+0x32c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d037      	beq.n	8000a46 <HAL_GPIO_Init+0x23e>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a57      	ldr	r2, [pc, #348]	; (8000b38 <HAL_GPIO_Init+0x330>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d031      	beq.n	8000a42 <HAL_GPIO_Init+0x23a>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a56      	ldr	r2, [pc, #344]	; (8000b3c <HAL_GPIO_Init+0x334>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d02b      	beq.n	8000a3e <HAL_GPIO_Init+0x236>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a55      	ldr	r2, [pc, #340]	; (8000b40 <HAL_GPIO_Init+0x338>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d025      	beq.n	8000a3a <HAL_GPIO_Init+0x232>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a54      	ldr	r2, [pc, #336]	; (8000b44 <HAL_GPIO_Init+0x33c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d01f      	beq.n	8000a36 <HAL_GPIO_Init+0x22e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a53      	ldr	r2, [pc, #332]	; (8000b48 <HAL_GPIO_Init+0x340>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d019      	beq.n	8000a32 <HAL_GPIO_Init+0x22a>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a52      	ldr	r2, [pc, #328]	; (8000b4c <HAL_GPIO_Init+0x344>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d013      	beq.n	8000a2e <HAL_GPIO_Init+0x226>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a51      	ldr	r2, [pc, #324]	; (8000b50 <HAL_GPIO_Init+0x348>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d00d      	beq.n	8000a2a <HAL_GPIO_Init+0x222>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a50      	ldr	r2, [pc, #320]	; (8000b54 <HAL_GPIO_Init+0x34c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d007      	beq.n	8000a26 <HAL_GPIO_Init+0x21e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4f      	ldr	r2, [pc, #316]	; (8000b58 <HAL_GPIO_Init+0x350>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_GPIO_Init+0x21a>
 8000a1e:	2309      	movs	r3, #9
 8000a20:	e012      	b.n	8000a48 <HAL_GPIO_Init+0x240>
 8000a22:	230a      	movs	r3, #10
 8000a24:	e010      	b.n	8000a48 <HAL_GPIO_Init+0x240>
 8000a26:	2308      	movs	r3, #8
 8000a28:	e00e      	b.n	8000a48 <HAL_GPIO_Init+0x240>
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	e00c      	b.n	8000a48 <HAL_GPIO_Init+0x240>
 8000a2e:	2306      	movs	r3, #6
 8000a30:	e00a      	b.n	8000a48 <HAL_GPIO_Init+0x240>
 8000a32:	2305      	movs	r3, #5
 8000a34:	e008      	b.n	8000a48 <HAL_GPIO_Init+0x240>
 8000a36:	2304      	movs	r3, #4
 8000a38:	e006      	b.n	8000a48 <HAL_GPIO_Init+0x240>
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	e004      	b.n	8000a48 <HAL_GPIO_Init+0x240>
 8000a3e:	2302      	movs	r3, #2
 8000a40:	e002      	b.n	8000a48 <HAL_GPIO_Init+0x240>
 8000a42:	2301      	movs	r3, #1
 8000a44:	e000      	b.n	8000a48 <HAL_GPIO_Init+0x240>
 8000a46:	2300      	movs	r3, #0
 8000a48:	69fa      	ldr	r2, [r7, #28]
 8000a4a:	f002 0203 	and.w	r2, r2, #3
 8000a4e:	0092      	lsls	r2, r2, #2
 8000a50:	4093      	lsls	r3, r2
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a58:	4935      	ldr	r1, [pc, #212]	; (8000b30 <HAL_GPIO_Init+0x328>)
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	3302      	adds	r3, #2
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a66:	4b3d      	ldr	r3, [pc, #244]	; (8000b5c <HAL_GPIO_Init+0x354>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	4013      	ands	r3, r2
 8000a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d003      	beq.n	8000a8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a8a:	4a34      	ldr	r2, [pc, #208]	; (8000b5c <HAL_GPIO_Init+0x354>)
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a90:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <HAL_GPIO_Init+0x354>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d003      	beq.n	8000ab4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000aac:	69ba      	ldr	r2, [r7, #24]
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ab4:	4a29      	ldr	r2, [pc, #164]	; (8000b5c <HAL_GPIO_Init+0x354>)
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_GPIO_Init+0x354>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ade:	4a1f      	ldr	r2, [pc, #124]	; (8000b5c <HAL_GPIO_Init+0x354>)
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <HAL_GPIO_Init+0x354>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4013      	ands	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b08:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <HAL_GPIO_Init+0x354>)
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3301      	adds	r3, #1
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	2b0f      	cmp	r3, #15
 8000b18:	f67f ae86 	bls.w	8000828 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40013800 	.word	0x40013800
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40021400 	.word	0x40021400
 8000b4c:	40021800 	.word	0x40021800
 8000b50:	40021c00 	.word	0x40021c00
 8000b54:	40022000 	.word	0x40022000
 8000b58:	40022400 	.word	0x40022400
 8000b5c:	40013c00 	.word	0x40013c00

08000b60 <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
 
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b74:	b090      	sub	sp, #64	; 0x40
 8000b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b80:	2300      	movs	r3, #0
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b88:	4b59      	ldr	r3, [pc, #356]	; (8000cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	f003 030c 	and.w	r3, r3, #12
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	d00d      	beq.n	8000bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8000b94:	2b08      	cmp	r3, #8
 8000b96:	f200 80a1 	bhi.w	8000cdc <HAL_RCC_GetSysClockFreq+0x16c>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d002      	beq.n	8000ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	d003      	beq.n	8000baa <HAL_RCC_GetSysClockFreq+0x3a>
 8000ba2:	e09b      	b.n	8000cdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ba4:	4b53      	ldr	r3, [pc, #332]	; (8000cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8000ba6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8000ba8:	e09b      	b.n	8000ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000baa:	4b53      	ldr	r3, [pc, #332]	; (8000cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8000bac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8000bae:	e098      	b.n	8000ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bb0:	4b4f      	ldr	r3, [pc, #316]	; (8000cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000bba:	4b4d      	ldr	r3, [pc, #308]	; (8000cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d028      	beq.n	8000c18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bc6:	4b4a      	ldr	r3, [pc, #296]	; (8000cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	099b      	lsrs	r3, r3, #6
 8000bcc:	2200      	movs	r2, #0
 8000bce:	623b      	str	r3, [r7, #32]
 8000bd0:	627a      	str	r2, [r7, #36]	; 0x24
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4b47      	ldr	r3, [pc, #284]	; (8000cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8000bdc:	fb03 f201 	mul.w	r2, r3, r1
 8000be0:	2300      	movs	r3, #0
 8000be2:	fb00 f303 	mul.w	r3, r0, r3
 8000be6:	4413      	add	r3, r2
 8000be8:	4a43      	ldr	r2, [pc, #268]	; (8000cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8000bea:	fba0 1202 	umull	r1, r2, r0, r2
 8000bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	62ba      	str	r2, [r7, #40]	; 0x28
 8000bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bf6:	4413      	add	r3, r2
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	61fa      	str	r2, [r7, #28]
 8000c02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000c06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000c0a:	f7ff fb05 	bl	8000218 <__aeabi_uldivmod>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	460b      	mov	r3, r1
 8000c12:	4613      	mov	r3, r2
 8000c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c16:	e053      	b.n	8000cc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c18:	4b35      	ldr	r3, [pc, #212]	; (8000cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	099b      	lsrs	r3, r3, #6
 8000c1e:	2200      	movs	r2, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	617a      	str	r2, [r7, #20]
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8000c2a:	f04f 0b00 	mov.w	fp, #0
 8000c2e:	4652      	mov	r2, sl
 8000c30:	465b      	mov	r3, fp
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	f04f 0100 	mov.w	r1, #0
 8000c3a:	0159      	lsls	r1, r3, #5
 8000c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000c40:	0150      	lsls	r0, r2, #5
 8000c42:	4602      	mov	r2, r0
 8000c44:	460b      	mov	r3, r1
 8000c46:	ebb2 080a 	subs.w	r8, r2, sl
 8000c4a:	eb63 090b 	sbc.w	r9, r3, fp
 8000c4e:	f04f 0200 	mov.w	r2, #0
 8000c52:	f04f 0300 	mov.w	r3, #0
 8000c56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000c5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000c5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000c62:	ebb2 0408 	subs.w	r4, r2, r8
 8000c66:	eb63 0509 	sbc.w	r5, r3, r9
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	f04f 0300 	mov.w	r3, #0
 8000c72:	00eb      	lsls	r3, r5, #3
 8000c74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c78:	00e2      	lsls	r2, r4, #3
 8000c7a:	4614      	mov	r4, r2
 8000c7c:	461d      	mov	r5, r3
 8000c7e:	eb14 030a 	adds.w	r3, r4, sl
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	eb45 030b 	adc.w	r3, r5, fp
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000c96:	4629      	mov	r1, r5
 8000c98:	028b      	lsls	r3, r1, #10
 8000c9a:	4621      	mov	r1, r4
 8000c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8000ca0:	4621      	mov	r1, r4
 8000ca2:	028a      	lsls	r2, r1, #10
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2200      	movs	r2, #0
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	60fa      	str	r2, [r7, #12]
 8000cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cb4:	f7ff fab0 	bl	8000218 <__aeabi_uldivmod>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	0c1b      	lsrs	r3, r3, #16
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	3301      	adds	r3, #1
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8000cd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8000cda:	e002      	b.n	8000ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8000cde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8000ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3740      	adds	r7, #64	; 0x40
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	00f42400 	.word	0x00f42400
 8000cf8:	017d7840 	.word	0x017d7840

08000cfc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008

08000d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000d18:	f7ff fff0 	bl	8000cfc <HAL_RCC_GetHCLKFreq>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	0a9b      	lsrs	r3, r3, #10
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	4903      	ldr	r1, [pc, #12]	; (8000d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d2a:	5ccb      	ldrb	r3, [r1, r3]
 8000d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800
 8000d38:	08001858 	.word	0x08001858

08000d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000d40:	f7ff ffdc 	bl	8000cfc <HAL_RCC_GetHCLKFreq>
 8000d44:	4602      	mov	r2, r0
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	0b5b      	lsrs	r3, r3, #13
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	4903      	ldr	r1, [pc, #12]	; (8000d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d52:	5ccb      	ldrb	r3, [r1, r3]
 8000d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	08001858 	.word	0x08001858

08000d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e040      	b.n	8000df8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d106      	bne.n	8000d8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f83a 	bl	8000e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2224      	movs	r2, #36	; 0x24
 8000d90:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f022 0201 	bic.w	r2, r2, #1
 8000da0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f000 f8ba 	bl	8000f1c <UART_SetConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d101      	bne.n	8000db2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e022      	b.n	8000df8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d002      	beq.n	8000dc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 fb12 	bl	80013e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000dce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000dde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0201 	orr.w	r2, r2, #1
 8000dee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 fb99 	bl	8001528 <UART_CheckIdleState>
 8000df6:	4603      	mov	r3, r0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af02      	add	r7, sp, #8
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	4613      	mov	r3, r2
 8000e22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e28:	2b20      	cmp	r3, #32
 8000e2a:	d171      	bne.n	8000f10 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d002      	beq.n	8000e38 <HAL_UART_Transmit+0x24>
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d101      	bne.n	8000e3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e06a      	b.n	8000f12 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2221      	movs	r2, #33	; 0x21
 8000e48:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000e4a:	f7ff fbc7 	bl	80005dc <HAL_GetTick>
 8000e4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	88fa      	ldrh	r2, [r7, #6]
 8000e54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	88fa      	ldrh	r2, [r7, #6]
 8000e5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e68:	d108      	bne.n	8000e7c <HAL_UART_Transmit+0x68>
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d104      	bne.n	8000e7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	e003      	b.n	8000e84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000e84:	e02c      	b.n	8000ee0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2180      	movs	r1, #128	; 0x80
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f000 fb80 	bl	8001596 <UART_WaitOnFlagUntilTimeout>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e038      	b.n	8000f12 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10b      	bne.n	8000ebe <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000eb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	3302      	adds	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
 8000ebc:	e007      	b.n	8000ece <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1cc      	bne.n	8000e86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2140      	movs	r1, #64	; 0x40
 8000ef6:	68f8      	ldr	r0, [r7, #12]
 8000ef8:	f000 fb4d 	bl	8001596 <UART_WaitOnFlagUntilTimeout>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e005      	b.n	8000f12 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2220      	movs	r2, #32
 8000f0a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e000      	b.n	8000f12 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8000f10:	2302      	movs	r3, #2
  }
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	431a      	orrs	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4ba6      	ldr	r3, [pc, #664]	; (80011e0 <UART_SetConfig+0x2c4>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6812      	ldr	r2, [r2, #0]
 8000f4e:	6979      	ldr	r1, [r7, #20]
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a94      	ldr	r2, [pc, #592]	; (80011e4 <UART_SetConfig+0x2c8>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d120      	bne.n	8000fda <UART_SetConfig+0xbe>
 8000f98:	4b93      	ldr	r3, [pc, #588]	; (80011e8 <UART_SetConfig+0x2cc>)
 8000f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d816      	bhi.n	8000fd4 <UART_SetConfig+0xb8>
 8000fa6:	a201      	add	r2, pc, #4	; (adr r2, 8000fac <UART_SetConfig+0x90>)
 8000fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fac:	08000fbd 	.word	0x08000fbd
 8000fb0:	08000fc9 	.word	0x08000fc9
 8000fb4:	08000fc3 	.word	0x08000fc3
 8000fb8:	08000fcf 	.word	0x08000fcf
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	77fb      	strb	r3, [r7, #31]
 8000fc0:	e150      	b.n	8001264 <UART_SetConfig+0x348>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	77fb      	strb	r3, [r7, #31]
 8000fc6:	e14d      	b.n	8001264 <UART_SetConfig+0x348>
 8000fc8:	2304      	movs	r3, #4
 8000fca:	77fb      	strb	r3, [r7, #31]
 8000fcc:	e14a      	b.n	8001264 <UART_SetConfig+0x348>
 8000fce:	2308      	movs	r3, #8
 8000fd0:	77fb      	strb	r3, [r7, #31]
 8000fd2:	e147      	b.n	8001264 <UART_SetConfig+0x348>
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	77fb      	strb	r3, [r7, #31]
 8000fd8:	e144      	b.n	8001264 <UART_SetConfig+0x348>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a83      	ldr	r2, [pc, #524]	; (80011ec <UART_SetConfig+0x2d0>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d132      	bne.n	800104a <UART_SetConfig+0x12e>
 8000fe4:	4b80      	ldr	r3, [pc, #512]	; (80011e8 <UART_SetConfig+0x2cc>)
 8000fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b0c      	cmp	r3, #12
 8000ff0:	d828      	bhi.n	8001044 <UART_SetConfig+0x128>
 8000ff2:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <UART_SetConfig+0xdc>)
 8000ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff8:	0800102d 	.word	0x0800102d
 8000ffc:	08001045 	.word	0x08001045
 8001000:	08001045 	.word	0x08001045
 8001004:	08001045 	.word	0x08001045
 8001008:	08001039 	.word	0x08001039
 800100c:	08001045 	.word	0x08001045
 8001010:	08001045 	.word	0x08001045
 8001014:	08001045 	.word	0x08001045
 8001018:	08001033 	.word	0x08001033
 800101c:	08001045 	.word	0x08001045
 8001020:	08001045 	.word	0x08001045
 8001024:	08001045 	.word	0x08001045
 8001028:	0800103f 	.word	0x0800103f
 800102c:	2300      	movs	r3, #0
 800102e:	77fb      	strb	r3, [r7, #31]
 8001030:	e118      	b.n	8001264 <UART_SetConfig+0x348>
 8001032:	2302      	movs	r3, #2
 8001034:	77fb      	strb	r3, [r7, #31]
 8001036:	e115      	b.n	8001264 <UART_SetConfig+0x348>
 8001038:	2304      	movs	r3, #4
 800103a:	77fb      	strb	r3, [r7, #31]
 800103c:	e112      	b.n	8001264 <UART_SetConfig+0x348>
 800103e:	2308      	movs	r3, #8
 8001040:	77fb      	strb	r3, [r7, #31]
 8001042:	e10f      	b.n	8001264 <UART_SetConfig+0x348>
 8001044:	2310      	movs	r3, #16
 8001046:	77fb      	strb	r3, [r7, #31]
 8001048:	e10c      	b.n	8001264 <UART_SetConfig+0x348>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a68      	ldr	r2, [pc, #416]	; (80011f0 <UART_SetConfig+0x2d4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d120      	bne.n	8001096 <UART_SetConfig+0x17a>
 8001054:	4b64      	ldr	r3, [pc, #400]	; (80011e8 <UART_SetConfig+0x2cc>)
 8001056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800105a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800105e:	2b30      	cmp	r3, #48	; 0x30
 8001060:	d013      	beq.n	800108a <UART_SetConfig+0x16e>
 8001062:	2b30      	cmp	r3, #48	; 0x30
 8001064:	d814      	bhi.n	8001090 <UART_SetConfig+0x174>
 8001066:	2b20      	cmp	r3, #32
 8001068:	d009      	beq.n	800107e <UART_SetConfig+0x162>
 800106a:	2b20      	cmp	r3, #32
 800106c:	d810      	bhi.n	8001090 <UART_SetConfig+0x174>
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <UART_SetConfig+0x15c>
 8001072:	2b10      	cmp	r3, #16
 8001074:	d006      	beq.n	8001084 <UART_SetConfig+0x168>
 8001076:	e00b      	b.n	8001090 <UART_SetConfig+0x174>
 8001078:	2300      	movs	r3, #0
 800107a:	77fb      	strb	r3, [r7, #31]
 800107c:	e0f2      	b.n	8001264 <UART_SetConfig+0x348>
 800107e:	2302      	movs	r3, #2
 8001080:	77fb      	strb	r3, [r7, #31]
 8001082:	e0ef      	b.n	8001264 <UART_SetConfig+0x348>
 8001084:	2304      	movs	r3, #4
 8001086:	77fb      	strb	r3, [r7, #31]
 8001088:	e0ec      	b.n	8001264 <UART_SetConfig+0x348>
 800108a:	2308      	movs	r3, #8
 800108c:	77fb      	strb	r3, [r7, #31]
 800108e:	e0e9      	b.n	8001264 <UART_SetConfig+0x348>
 8001090:	2310      	movs	r3, #16
 8001092:	77fb      	strb	r3, [r7, #31]
 8001094:	e0e6      	b.n	8001264 <UART_SetConfig+0x348>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a56      	ldr	r2, [pc, #344]	; (80011f4 <UART_SetConfig+0x2d8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d120      	bne.n	80010e2 <UART_SetConfig+0x1c6>
 80010a0:	4b51      	ldr	r3, [pc, #324]	; (80011e8 <UART_SetConfig+0x2cc>)
 80010a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80010aa:	2bc0      	cmp	r3, #192	; 0xc0
 80010ac:	d013      	beq.n	80010d6 <UART_SetConfig+0x1ba>
 80010ae:	2bc0      	cmp	r3, #192	; 0xc0
 80010b0:	d814      	bhi.n	80010dc <UART_SetConfig+0x1c0>
 80010b2:	2b80      	cmp	r3, #128	; 0x80
 80010b4:	d009      	beq.n	80010ca <UART_SetConfig+0x1ae>
 80010b6:	2b80      	cmp	r3, #128	; 0x80
 80010b8:	d810      	bhi.n	80010dc <UART_SetConfig+0x1c0>
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <UART_SetConfig+0x1a8>
 80010be:	2b40      	cmp	r3, #64	; 0x40
 80010c0:	d006      	beq.n	80010d0 <UART_SetConfig+0x1b4>
 80010c2:	e00b      	b.n	80010dc <UART_SetConfig+0x1c0>
 80010c4:	2300      	movs	r3, #0
 80010c6:	77fb      	strb	r3, [r7, #31]
 80010c8:	e0cc      	b.n	8001264 <UART_SetConfig+0x348>
 80010ca:	2302      	movs	r3, #2
 80010cc:	77fb      	strb	r3, [r7, #31]
 80010ce:	e0c9      	b.n	8001264 <UART_SetConfig+0x348>
 80010d0:	2304      	movs	r3, #4
 80010d2:	77fb      	strb	r3, [r7, #31]
 80010d4:	e0c6      	b.n	8001264 <UART_SetConfig+0x348>
 80010d6:	2308      	movs	r3, #8
 80010d8:	77fb      	strb	r3, [r7, #31]
 80010da:	e0c3      	b.n	8001264 <UART_SetConfig+0x348>
 80010dc:	2310      	movs	r3, #16
 80010de:	77fb      	strb	r3, [r7, #31]
 80010e0:	e0c0      	b.n	8001264 <UART_SetConfig+0x348>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a44      	ldr	r2, [pc, #272]	; (80011f8 <UART_SetConfig+0x2dc>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d125      	bne.n	8001138 <UART_SetConfig+0x21c>
 80010ec:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <UART_SetConfig+0x2cc>)
 80010ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80010fa:	d017      	beq.n	800112c <UART_SetConfig+0x210>
 80010fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001100:	d817      	bhi.n	8001132 <UART_SetConfig+0x216>
 8001102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001106:	d00b      	beq.n	8001120 <UART_SetConfig+0x204>
 8001108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800110c:	d811      	bhi.n	8001132 <UART_SetConfig+0x216>
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <UART_SetConfig+0x1fe>
 8001112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001116:	d006      	beq.n	8001126 <UART_SetConfig+0x20a>
 8001118:	e00b      	b.n	8001132 <UART_SetConfig+0x216>
 800111a:	2300      	movs	r3, #0
 800111c:	77fb      	strb	r3, [r7, #31]
 800111e:	e0a1      	b.n	8001264 <UART_SetConfig+0x348>
 8001120:	2302      	movs	r3, #2
 8001122:	77fb      	strb	r3, [r7, #31]
 8001124:	e09e      	b.n	8001264 <UART_SetConfig+0x348>
 8001126:	2304      	movs	r3, #4
 8001128:	77fb      	strb	r3, [r7, #31]
 800112a:	e09b      	b.n	8001264 <UART_SetConfig+0x348>
 800112c:	2308      	movs	r3, #8
 800112e:	77fb      	strb	r3, [r7, #31]
 8001130:	e098      	b.n	8001264 <UART_SetConfig+0x348>
 8001132:	2310      	movs	r3, #16
 8001134:	77fb      	strb	r3, [r7, #31]
 8001136:	e095      	b.n	8001264 <UART_SetConfig+0x348>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a2f      	ldr	r2, [pc, #188]	; (80011fc <UART_SetConfig+0x2e0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d125      	bne.n	800118e <UART_SetConfig+0x272>
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <UART_SetConfig+0x2cc>)
 8001144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001148:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800114c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001150:	d017      	beq.n	8001182 <UART_SetConfig+0x266>
 8001152:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001156:	d817      	bhi.n	8001188 <UART_SetConfig+0x26c>
 8001158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800115c:	d00b      	beq.n	8001176 <UART_SetConfig+0x25a>
 800115e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001162:	d811      	bhi.n	8001188 <UART_SetConfig+0x26c>
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <UART_SetConfig+0x254>
 8001168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800116c:	d006      	beq.n	800117c <UART_SetConfig+0x260>
 800116e:	e00b      	b.n	8001188 <UART_SetConfig+0x26c>
 8001170:	2301      	movs	r3, #1
 8001172:	77fb      	strb	r3, [r7, #31]
 8001174:	e076      	b.n	8001264 <UART_SetConfig+0x348>
 8001176:	2302      	movs	r3, #2
 8001178:	77fb      	strb	r3, [r7, #31]
 800117a:	e073      	b.n	8001264 <UART_SetConfig+0x348>
 800117c:	2304      	movs	r3, #4
 800117e:	77fb      	strb	r3, [r7, #31]
 8001180:	e070      	b.n	8001264 <UART_SetConfig+0x348>
 8001182:	2308      	movs	r3, #8
 8001184:	77fb      	strb	r3, [r7, #31]
 8001186:	e06d      	b.n	8001264 <UART_SetConfig+0x348>
 8001188:	2310      	movs	r3, #16
 800118a:	77fb      	strb	r3, [r7, #31]
 800118c:	e06a      	b.n	8001264 <UART_SetConfig+0x348>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a1b      	ldr	r2, [pc, #108]	; (8001200 <UART_SetConfig+0x2e4>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d138      	bne.n	800120a <UART_SetConfig+0x2ee>
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <UART_SetConfig+0x2cc>)
 800119a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80011a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80011a6:	d017      	beq.n	80011d8 <UART_SetConfig+0x2bc>
 80011a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80011ac:	d82a      	bhi.n	8001204 <UART_SetConfig+0x2e8>
 80011ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011b2:	d00b      	beq.n	80011cc <UART_SetConfig+0x2b0>
 80011b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011b8:	d824      	bhi.n	8001204 <UART_SetConfig+0x2e8>
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <UART_SetConfig+0x2aa>
 80011be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011c2:	d006      	beq.n	80011d2 <UART_SetConfig+0x2b6>
 80011c4:	e01e      	b.n	8001204 <UART_SetConfig+0x2e8>
 80011c6:	2300      	movs	r3, #0
 80011c8:	77fb      	strb	r3, [r7, #31]
 80011ca:	e04b      	b.n	8001264 <UART_SetConfig+0x348>
 80011cc:	2302      	movs	r3, #2
 80011ce:	77fb      	strb	r3, [r7, #31]
 80011d0:	e048      	b.n	8001264 <UART_SetConfig+0x348>
 80011d2:	2304      	movs	r3, #4
 80011d4:	77fb      	strb	r3, [r7, #31]
 80011d6:	e045      	b.n	8001264 <UART_SetConfig+0x348>
 80011d8:	2308      	movs	r3, #8
 80011da:	77fb      	strb	r3, [r7, #31]
 80011dc:	e042      	b.n	8001264 <UART_SetConfig+0x348>
 80011de:	bf00      	nop
 80011e0:	efff69f3 	.word	0xefff69f3
 80011e4:	40011000 	.word	0x40011000
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40004400 	.word	0x40004400
 80011f0:	40004800 	.word	0x40004800
 80011f4:	40004c00 	.word	0x40004c00
 80011f8:	40005000 	.word	0x40005000
 80011fc:	40011400 	.word	0x40011400
 8001200:	40007800 	.word	0x40007800
 8001204:	2310      	movs	r3, #16
 8001206:	77fb      	strb	r3, [r7, #31]
 8001208:	e02c      	b.n	8001264 <UART_SetConfig+0x348>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a72      	ldr	r2, [pc, #456]	; (80013d8 <UART_SetConfig+0x4bc>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d125      	bne.n	8001260 <UART_SetConfig+0x344>
 8001214:	4b71      	ldr	r3, [pc, #452]	; (80013dc <UART_SetConfig+0x4c0>)
 8001216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800121a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800121e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001222:	d017      	beq.n	8001254 <UART_SetConfig+0x338>
 8001224:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001228:	d817      	bhi.n	800125a <UART_SetConfig+0x33e>
 800122a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800122e:	d00b      	beq.n	8001248 <UART_SetConfig+0x32c>
 8001230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001234:	d811      	bhi.n	800125a <UART_SetConfig+0x33e>
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <UART_SetConfig+0x326>
 800123a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800123e:	d006      	beq.n	800124e <UART_SetConfig+0x332>
 8001240:	e00b      	b.n	800125a <UART_SetConfig+0x33e>
 8001242:	2300      	movs	r3, #0
 8001244:	77fb      	strb	r3, [r7, #31]
 8001246:	e00d      	b.n	8001264 <UART_SetConfig+0x348>
 8001248:	2302      	movs	r3, #2
 800124a:	77fb      	strb	r3, [r7, #31]
 800124c:	e00a      	b.n	8001264 <UART_SetConfig+0x348>
 800124e:	2304      	movs	r3, #4
 8001250:	77fb      	strb	r3, [r7, #31]
 8001252:	e007      	b.n	8001264 <UART_SetConfig+0x348>
 8001254:	2308      	movs	r3, #8
 8001256:	77fb      	strb	r3, [r7, #31]
 8001258:	e004      	b.n	8001264 <UART_SetConfig+0x348>
 800125a:	2310      	movs	r3, #16
 800125c:	77fb      	strb	r3, [r7, #31]
 800125e:	e001      	b.n	8001264 <UART_SetConfig+0x348>
 8001260:	2310      	movs	r3, #16
 8001262:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800126c:	d15b      	bne.n	8001326 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800126e:	7ffb      	ldrb	r3, [r7, #31]
 8001270:	2b08      	cmp	r3, #8
 8001272:	d828      	bhi.n	80012c6 <UART_SetConfig+0x3aa>
 8001274:	a201      	add	r2, pc, #4	; (adr r2, 800127c <UART_SetConfig+0x360>)
 8001276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127a:	bf00      	nop
 800127c:	080012a1 	.word	0x080012a1
 8001280:	080012a9 	.word	0x080012a9
 8001284:	080012b1 	.word	0x080012b1
 8001288:	080012c7 	.word	0x080012c7
 800128c:	080012b7 	.word	0x080012b7
 8001290:	080012c7 	.word	0x080012c7
 8001294:	080012c7 	.word	0x080012c7
 8001298:	080012c7 	.word	0x080012c7
 800129c:	080012bf 	.word	0x080012bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80012a0:	f7ff fd38 	bl	8000d14 <HAL_RCC_GetPCLK1Freq>
 80012a4:	61b8      	str	r0, [r7, #24]
        break;
 80012a6:	e013      	b.n	80012d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80012a8:	f7ff fd48 	bl	8000d3c <HAL_RCC_GetPCLK2Freq>
 80012ac:	61b8      	str	r0, [r7, #24]
        break;
 80012ae:	e00f      	b.n	80012d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80012b0:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <UART_SetConfig+0x4c4>)
 80012b2:	61bb      	str	r3, [r7, #24]
        break;
 80012b4:	e00c      	b.n	80012d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80012b6:	f7ff fc5b 	bl	8000b70 <HAL_RCC_GetSysClockFreq>
 80012ba:	61b8      	str	r0, [r7, #24]
        break;
 80012bc:	e008      	b.n	80012d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80012be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012c2:	61bb      	str	r3, [r7, #24]
        break;
 80012c4:	e004      	b.n	80012d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	77bb      	strb	r3, [r7, #30]
        break;
 80012ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d074      	beq.n	80013c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	005a      	lsls	r2, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	085b      	lsrs	r3, r3, #1
 80012e0:	441a      	add	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	d916      	bls.n	8001320 <UART_SetConfig+0x404>
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f8:	d212      	bcs.n	8001320 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	f023 030f 	bic.w	r3, r3, #15
 8001302:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	085b      	lsrs	r3, r3, #1
 8001308:	b29b      	uxth	r3, r3
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	b29a      	uxth	r2, r3
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	4313      	orrs	r3, r2
 8001314:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	89fa      	ldrh	r2, [r7, #14]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	e04f      	b.n	80013c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	77bb      	strb	r3, [r7, #30]
 8001324:	e04c      	b.n	80013c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001326:	7ffb      	ldrb	r3, [r7, #31]
 8001328:	2b08      	cmp	r3, #8
 800132a:	d828      	bhi.n	800137e <UART_SetConfig+0x462>
 800132c:	a201      	add	r2, pc, #4	; (adr r2, 8001334 <UART_SetConfig+0x418>)
 800132e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001332:	bf00      	nop
 8001334:	08001359 	.word	0x08001359
 8001338:	08001361 	.word	0x08001361
 800133c:	08001369 	.word	0x08001369
 8001340:	0800137f 	.word	0x0800137f
 8001344:	0800136f 	.word	0x0800136f
 8001348:	0800137f 	.word	0x0800137f
 800134c:	0800137f 	.word	0x0800137f
 8001350:	0800137f 	.word	0x0800137f
 8001354:	08001377 	.word	0x08001377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001358:	f7ff fcdc 	bl	8000d14 <HAL_RCC_GetPCLK1Freq>
 800135c:	61b8      	str	r0, [r7, #24]
        break;
 800135e:	e013      	b.n	8001388 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001360:	f7ff fcec 	bl	8000d3c <HAL_RCC_GetPCLK2Freq>
 8001364:	61b8      	str	r0, [r7, #24]
        break;
 8001366:	e00f      	b.n	8001388 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <UART_SetConfig+0x4c4>)
 800136a:	61bb      	str	r3, [r7, #24]
        break;
 800136c:	e00c      	b.n	8001388 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800136e:	f7ff fbff 	bl	8000b70 <HAL_RCC_GetSysClockFreq>
 8001372:	61b8      	str	r0, [r7, #24]
        break;
 8001374:	e008      	b.n	8001388 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800137a:	61bb      	str	r3, [r7, #24]
        break;
 800137c:	e004      	b.n	8001388 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	77bb      	strb	r3, [r7, #30]
        break;
 8001386:	bf00      	nop
    }

    if (pclk != 0U)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d018      	beq.n	80013c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	085a      	lsrs	r2, r3, #1
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	441a      	add	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d909      	bls.n	80013bc <UART_SetConfig+0x4a0>
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ae:	d205      	bcs.n	80013bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	e001      	b.n	80013c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80013cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40007c00 	.word	0x40007c00
 80013dc:	40023800 	.word	0x40023800
 80013e0:	00f42400 	.word	0x00f42400

080013e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00a      	beq.n	800140e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00a      	beq.n	8001430 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00a      	beq.n	8001452 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00a      	beq.n	8001474 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	f003 0310 	and.w	r3, r3, #16
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00a      	beq.n	8001496 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	f003 0320 	and.w	r3, r3, #32
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00a      	beq.n	80014b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d01a      	beq.n	80014fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014e2:	d10a      	bne.n	80014fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00a      	beq.n	800151c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	605a      	str	r2, [r3, #4]
  }
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af02      	add	r7, sp, #8
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001538:	f7ff f850 	bl	80005dc <HAL_GetTick>
 800153c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b08      	cmp	r3, #8
 800154a:	d10e      	bne.n	800156a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800154c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f81b 	bl	8001596 <UART_WaitOnFlagUntilTimeout>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e011      	b.n	800158e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2220      	movs	r2, #32
 800156e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2220      	movs	r2, #32
 8001574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4613      	mov	r3, r2
 80015a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015a6:	e040      	b.n	800162a <UART_WaitOnFlagUntilTimeout+0x94>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ae:	d03c      	beq.n	800162a <UART_WaitOnFlagUntilTimeout+0x94>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015b0:	f7ff f814 	bl	80005dc <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d302      	bcc.n	80015c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10c      	bne.n	80015e0 <UART_WaitOnFlagUntilTimeout+0x4a>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
//        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
//        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

        huart->gState = HAL_UART_STATE_READY;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2220      	movs	r2, #32
 80015ca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2220      	movs	r2, #32
 80015d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e034      	b.n	800164a <UART_WaitOnFlagUntilTimeout+0xb4>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d01d      	beq.n	800162a <UART_WaitOnFlagUntilTimeout+0x94>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015fc:	d115      	bne.n	800162a <UART_WaitOnFlagUntilTimeout+0x94>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001606:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
//          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
//          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2220      	movs	r2, #32
 800160c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2220      	movs	r2, #32
 8001612:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2220      	movs	r2, #32
 800161a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e00f      	b.n	800164a <UART_WaitOnFlagUntilTimeout+0xb4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	69da      	ldr	r2, [r3, #28]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4013      	ands	r3, r2
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	429a      	cmp	r2, r3
 8001638:	bf0c      	ite	eq
 800163a:	2301      	moveq	r3, #1
 800163c:	2300      	movne	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	429a      	cmp	r2, r3
 8001646:	d0af      	beq.n	80015a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <UART3_Init>:
#include <string.h>

UART_HandleTypeDef huart3;

void UART3_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 800165a:	4b32      	ldr	r3, [pc, #200]	; (8001724 <UART3_Init+0xd0>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a31      	ldr	r2, [pc, #196]	; (8001724 <UART3_Init+0xd0>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <UART3_Init+0xd0>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001672:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <UART3_Init+0xd0>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a2b      	ldr	r2, [pc, #172]	; (8001724 <UART3_Init+0xd0>)
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b29      	ldr	r3, [pc, #164]	; (8001724 <UART3_Init+0xd0>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]

    // PD8 = TX
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800169a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ac:	2307      	movs	r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	481c      	ldr	r0, [pc, #112]	; (8001728 <UART3_Init+0xd4>)
 80016b8:	f7ff f8a6 	bl	8000808 <HAL_GPIO_Init>

    // PD9 = RX
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ca:	2307      	movs	r3, #7
 80016cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	4619      	mov	r1, r3
 80016d4:	4814      	ldr	r0, [pc, #80]	; (8001728 <UART3_Init+0xd4>)
 80016d6:	f7ff f897 	bl	8000808 <HAL_GPIO_Init>

    huart3.Instance          = USART3;
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <UART3_Init+0xd8>)
 80016dc:	4a14      	ldr	r2, [pc, #80]	; (8001730 <UART3_Init+0xdc>)
 80016de:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate     = 115200;
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <UART3_Init+0xd8>)
 80016e2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e6:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength   = UART_WORDLENGTH_8B;
 80016e8:	4b10      	ldr	r3, [pc, #64]	; (800172c <UART3_Init+0xd8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits     = UART_STOPBITS_1;
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <UART3_Init+0xd8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity       = UART_PARITY_NONE;
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <UART3_Init+0xd8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode         = UART_MODE_TX_RX;
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <UART3_Init+0xd8>)
 80016fc:	220c      	movs	r2, #12
 80016fe:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <UART3_Init+0xd8>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <UART3_Init+0xd8>)
 8001708:	2200      	movs	r2, #0
 800170a:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart3) != HAL_OK)
 800170c:	4807      	ldr	r0, [pc, #28]	; (800172c <UART3_Init+0xd8>)
 800170e:	f7ff fb29 	bl	8000d64 <HAL_UART_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d000      	beq.n	800171a <UART3_Init+0xc6>
    {
        while (1); // init error
 8001718:	e7fe      	b.n	8001718 <UART3_Init+0xc4>
    }
}
 800171a:	bf00      	nop
 800171c:	3720      	adds	r7, #32
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40020c00 	.word	0x40020c00
 800172c:	2000002c 	.word	0x2000002c
 8001730:	40004800 	.word	0x40004800

08001734 <main>:

int main(void)
{
 8001734:	b5b0      	push	{r4, r5, r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
    HAL_Init();
 800173a:	f7fe feef 	bl	800051c <HAL_Init>
    UART3_Init();
 800173e:	f7ff ff89 	bl	8001654 <UART3_Init>

    char msg[] = "Hello from STM32F7\r\n";
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <main+0x44>)
 8001744:	463c      	mov	r4, r7
 8001746:	461d      	mov	r5, r3
 8001748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800174a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800174c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001750:	6020      	str	r0, [r4, #0]
 8001752:	3404      	adds	r4, #4
 8001754:	7021      	strb	r1, [r4, #0]

    while (1)
    {
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001756:	463b      	mov	r3, r7
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fd55 	bl	8000208 <strlen>
 800175e:	4603      	mov	r3, r0
 8001760:	b29a      	uxth	r2, r3
 8001762:	4639      	mov	r1, r7
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
 8001768:	4804      	ldr	r0, [pc, #16]	; (800177c <main+0x48>)
 800176a:	f7ff fb53 	bl	8000e14 <HAL_UART_Transmit>
        HAL_Delay(1000); // 1 sec gap so string doesn’t overlap
 800176e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001772:	f7fe ff3f 	bl	80005f4 <HAL_Delay>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001776:	e7ee      	b.n	8001756 <main+0x22>
 8001778:	08001840 	.word	0x08001840
 800177c:	2000002c 	.word	0x2000002c

08001780 <SysTick_Handler>:
    }
}

// minimal SysTick handler
void SysTick_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001784:	f7fe ff16 	bl	80005b4 <HAL_IncTick>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800178e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001790:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001796:	490d      	ldr	r1, [pc, #52]	; (80017cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001798:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <LoopForever+0xe>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017ac:	4c0a      	ldr	r4, [pc, #40]	; (80017d8 <LoopForever+0x16>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017ba:	f000 f811 	bl	80017e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017be:	f7ff ffb9 	bl	8001734 <main>

080017c2 <LoopForever>:

LoopForever:
    b LoopForever
 80017c2:	e7fe      	b.n	80017c2 <LoopForever>
  ldr   r0, =_estack
 80017c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017d0:	08001870 	.word	0x08001870
  ldr r2, =_sbss
 80017d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017d8:	200000b4 	.word	0x200000b4

080017dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC_IRQHandler>
	...

080017e0 <__libc_init_array>:
 80017e0:	b570      	push	{r4, r5, r6, lr}
 80017e2:	4d0d      	ldr	r5, [pc, #52]	; (8001818 <__libc_init_array+0x38>)
 80017e4:	4c0d      	ldr	r4, [pc, #52]	; (800181c <__libc_init_array+0x3c>)
 80017e6:	1b64      	subs	r4, r4, r5
 80017e8:	10a4      	asrs	r4, r4, #2
 80017ea:	2600      	movs	r6, #0
 80017ec:	42a6      	cmp	r6, r4
 80017ee:	d109      	bne.n	8001804 <__libc_init_array+0x24>
 80017f0:	4d0b      	ldr	r5, [pc, #44]	; (8001820 <__libc_init_array+0x40>)
 80017f2:	4c0c      	ldr	r4, [pc, #48]	; (8001824 <__libc_init_array+0x44>)
 80017f4:	f000 f818 	bl	8001828 <_init>
 80017f8:	1b64      	subs	r4, r4, r5
 80017fa:	10a4      	asrs	r4, r4, #2
 80017fc:	2600      	movs	r6, #0
 80017fe:	42a6      	cmp	r6, r4
 8001800:	d105      	bne.n	800180e <__libc_init_array+0x2e>
 8001802:	bd70      	pop	{r4, r5, r6, pc}
 8001804:	f855 3b04 	ldr.w	r3, [r5], #4
 8001808:	4798      	blx	r3
 800180a:	3601      	adds	r6, #1
 800180c:	e7ee      	b.n	80017ec <__libc_init_array+0xc>
 800180e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001812:	4798      	blx	r3
 8001814:	3601      	adds	r6, #1
 8001816:	e7f2      	b.n	80017fe <__libc_init_array+0x1e>
 8001818:	08001868 	.word	0x08001868
 800181c:	08001868 	.word	0x08001868
 8001820:	08001868 	.word	0x08001868
 8001824:	0800186c 	.word	0x0800186c

08001828 <_init>:
 8001828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182a:	bf00      	nop
 800182c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800182e:	bc08      	pop	{r3}
 8001830:	469e      	mov	lr, r3
 8001832:	4770      	bx	lr

08001834 <_fini>:
 8001834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001836:	bf00      	nop
 8001838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800183a:	bc08      	pop	{r3}
 800183c:	469e      	mov	lr, r3
 800183e:	4770      	bx	lr
