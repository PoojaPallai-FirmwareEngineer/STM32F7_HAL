
5_UartTx_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002388  08002388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800240c  0800240c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800240c  0800240c  0001240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002414  08002414  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800241c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  0800248c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  0800248c  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e23  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001133  00000000  00000000  00025ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  00026ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  00027690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003727  00000000  00000000  00027cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009371  00000000  00000000  0002b417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00122277  00000000  00000000  00034788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001569ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002088  00000000  00000000  00156a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002370 	.word	0x08002370

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08002370 	.word	0x08002370

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x34>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <HAL_Init+0x34>)
 8000516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800051a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <HAL_Init+0x34>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a07      	ldr	r2, [pc, #28]	; (8000540 <HAL_Init+0x34>)
 8000522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000528:	2003      	movs	r0, #3
 800052a:	f000 f931 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052e:	200f      	movs	r0, #15
 8000530:	f000 f808 	bl	8000544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000534:	f000 fb0c 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x54>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x58>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	4619      	mov	r1, r3
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	fbb3 f3f1 	udiv	r3, r3, r1
 800055e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f93b 	bl	80007de <HAL_SYSTICK_Config>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
 8000570:	e00e      	b.n	8000590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b0f      	cmp	r3, #15
 8000576:	d80a      	bhi.n	800058e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000578:	2200      	movs	r2, #0
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	f04f 30ff 	mov.w	r0, #4294967295
 8000580:	f000 f911 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <HAL_InitTick+0x5c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058a:	2300      	movs	r3, #0
 800058c:	e000      	b.n	8000590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058e:	2301      	movs	r3, #1
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000008 	.word	0x20000008
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000000 	.word	0x20000000

080005a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x20>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x24>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4413      	add	r3, r2
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <HAL_IncTick+0x24>)
 80005b6:	6013      	str	r3, [r2, #0]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000004 	.word	0x20000004
 80005c8:	2000008c 	.word	0x2000008c

080005cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  return uwTick;
 80005d0:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <HAL_GetTick+0x14>)
 80005d2:	681b      	ldr	r3, [r3, #0]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	2000008c 	.word	0x2000008c

080005e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005ec:	f7ff ffee 	bl	80005cc <HAL_GetTick>
 80005f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005fc:	d005      	beq.n	800060a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <HAL_Delay+0x44>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	461a      	mov	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	4413      	add	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800060a:	bf00      	nop
 800060c:	f7ff ffde 	bl	80005cc <HAL_GetTick>
 8000610:	4602      	mov	r2, r0
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	429a      	cmp	r2, r3
 800061a:	d8f7      	bhi.n	800060c <HAL_Delay+0x28>
  {
  }
}
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000004 	.word	0x20000004

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <__NVIC_SetPriorityGrouping+0x40>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000656:	4313      	orrs	r3, r2
 8000658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <__NVIC_SetPriorityGrouping+0x40>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	60d3      	str	r3, [r2, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00
 8000670:	05fa0000 	.word	0x05fa0000

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff47 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff5c 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ffb0 	bl	800074c <SysTick_Config>
 80007ec:	4603      	mov	r3, r0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	; 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
 8000816:	e175      	b.n	8000b04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000818:	2201      	movs	r2, #1
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	4013      	ands	r3, r2
 800082a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	429a      	cmp	r2, r3
 8000832:	f040 8164 	bne.w	8000afe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	f003 0303 	and.w	r3, r3, #3
 800083e:	2b01      	cmp	r3, #1
 8000840:	d005      	beq.n	800084e <HAL_GPIO_Init+0x56>
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f003 0303 	and.w	r3, r3, #3
 800084a:	2b02      	cmp	r3, #2
 800084c:	d130      	bne.n	80008b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	2203      	movs	r2, #3
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	4013      	ands	r3, r2
 8000864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	68da      	ldr	r2, [r3, #12]
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	69ba      	ldr	r2, [r7, #24]
 8000874:	4313      	orrs	r3, r2
 8000876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	69ba      	ldr	r2, [r7, #24]
 800087c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000884:	2201      	movs	r2, #1
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4013      	ands	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	091b      	lsrs	r3, r3, #4
 800089a:	f003 0201 	and.w	r2, r3, #1
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f003 0303 	and.w	r3, r3, #3
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d017      	beq.n	80008ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	2203      	movs	r2, #3
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4013      	ands	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	689a      	ldr	r2, [r3, #8]
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f003 0303 	and.w	r3, r3, #3
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d123      	bne.n	8000940 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	08da      	lsrs	r2, r3, #3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3208      	adds	r2, #8
 8000900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	f003 0307 	and.w	r3, r3, #7
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	220f      	movs	r2, #15
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	691a      	ldr	r2, [r3, #16]
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	4313      	orrs	r3, r2
 8000930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	08da      	lsrs	r2, r3, #3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3208      	adds	r2, #8
 800093a:	69b9      	ldr	r1, [r7, #24]
 800093c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	2203      	movs	r2, #3
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	69ba      	ldr	r2, [r7, #24]
 8000954:	4013      	ands	r3, r2
 8000956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f003 0203 	and.w	r2, r3, #3
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4313      	orrs	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800097c:	2b00      	cmp	r3, #0
 800097e:	f000 80be 	beq.w	8000afe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b66      	ldr	r3, [pc, #408]	; (8000b1c <HAL_GPIO_Init+0x324>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a65      	ldr	r2, [pc, #404]	; (8000b1c <HAL_GPIO_Init+0x324>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b63      	ldr	r3, [pc, #396]	; (8000b1c <HAL_GPIO_Init+0x324>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800099a:	4a61      	ldr	r2, [pc, #388]	; (8000b20 <HAL_GPIO_Init+0x328>)
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	089b      	lsrs	r3, r3, #2
 80009a0:	3302      	adds	r3, #2
 80009a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	220f      	movs	r2, #15
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	4013      	ands	r3, r2
 80009bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a58      	ldr	r2, [pc, #352]	; (8000b24 <HAL_GPIO_Init+0x32c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d037      	beq.n	8000a36 <HAL_GPIO_Init+0x23e>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a57      	ldr	r2, [pc, #348]	; (8000b28 <HAL_GPIO_Init+0x330>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d031      	beq.n	8000a32 <HAL_GPIO_Init+0x23a>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a56      	ldr	r2, [pc, #344]	; (8000b2c <HAL_GPIO_Init+0x334>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d02b      	beq.n	8000a2e <HAL_GPIO_Init+0x236>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a55      	ldr	r2, [pc, #340]	; (8000b30 <HAL_GPIO_Init+0x338>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d025      	beq.n	8000a2a <HAL_GPIO_Init+0x232>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a54      	ldr	r2, [pc, #336]	; (8000b34 <HAL_GPIO_Init+0x33c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d01f      	beq.n	8000a26 <HAL_GPIO_Init+0x22e>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a53      	ldr	r2, [pc, #332]	; (8000b38 <HAL_GPIO_Init+0x340>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d019      	beq.n	8000a22 <HAL_GPIO_Init+0x22a>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a52      	ldr	r2, [pc, #328]	; (8000b3c <HAL_GPIO_Init+0x344>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0x226>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a51      	ldr	r2, [pc, #324]	; (8000b40 <HAL_GPIO_Init+0x348>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d00d      	beq.n	8000a1a <HAL_GPIO_Init+0x222>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a50      	ldr	r2, [pc, #320]	; (8000b44 <HAL_GPIO_Init+0x34c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d007      	beq.n	8000a16 <HAL_GPIO_Init+0x21e>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a4f      	ldr	r2, [pc, #316]	; (8000b48 <HAL_GPIO_Init+0x350>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_GPIO_Init+0x21a>
 8000a0e:	2309      	movs	r3, #9
 8000a10:	e012      	b.n	8000a38 <HAL_GPIO_Init+0x240>
 8000a12:	230a      	movs	r3, #10
 8000a14:	e010      	b.n	8000a38 <HAL_GPIO_Init+0x240>
 8000a16:	2308      	movs	r3, #8
 8000a18:	e00e      	b.n	8000a38 <HAL_GPIO_Init+0x240>
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	e00c      	b.n	8000a38 <HAL_GPIO_Init+0x240>
 8000a1e:	2306      	movs	r3, #6
 8000a20:	e00a      	b.n	8000a38 <HAL_GPIO_Init+0x240>
 8000a22:	2305      	movs	r3, #5
 8000a24:	e008      	b.n	8000a38 <HAL_GPIO_Init+0x240>
 8000a26:	2304      	movs	r3, #4
 8000a28:	e006      	b.n	8000a38 <HAL_GPIO_Init+0x240>
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	e004      	b.n	8000a38 <HAL_GPIO_Init+0x240>
 8000a2e:	2302      	movs	r3, #2
 8000a30:	e002      	b.n	8000a38 <HAL_GPIO_Init+0x240>
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <HAL_GPIO_Init+0x240>
 8000a36:	2300      	movs	r3, #0
 8000a38:	69fa      	ldr	r2, [r7, #28]
 8000a3a:	f002 0203 	and.w	r2, r2, #3
 8000a3e:	0092      	lsls	r2, r2, #2
 8000a40:	4093      	lsls	r3, r2
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a48:	4935      	ldr	r1, [pc, #212]	; (8000b20 <HAL_GPIO_Init+0x328>)
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	089b      	lsrs	r3, r3, #2
 8000a4e:	3302      	adds	r3, #2
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a56:	4b3d      	ldr	r3, [pc, #244]	; (8000b4c <HAL_GPIO_Init+0x354>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4013      	ands	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a7a:	4a34      	ldr	r2, [pc, #208]	; (8000b4c <HAL_GPIO_Init+0x354>)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a80:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <HAL_GPIO_Init+0x354>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aa4:	4a29      	ldr	r2, [pc, #164]	; (8000b4c <HAL_GPIO_Init+0x354>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000aaa:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <HAL_GPIO_Init+0x354>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ace:	4a1f      	ldr	r2, [pc, #124]	; (8000b4c <HAL_GPIO_Init+0x354>)
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <HAL_GPIO_Init+0x354>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000af8:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <HAL_GPIO_Init+0x354>)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3301      	adds	r3, #1
 8000b02:	61fb      	str	r3, [r7, #28]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	2b0f      	cmp	r3, #15
 8000b08:	f67f ae86 	bls.w	8000818 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3724      	adds	r7, #36	; 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40013800 	.word	0x40013800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40021400 	.word	0x40021400
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	40021c00 	.word	0x40021c00
 8000b44:	40022000 	.word	0x40022000
 8000b48:	40022400 	.word	0x40022400
 8000b4c:	40013c00 	.word	0x40013c00

08000b50 <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
 
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b64:	b090      	sub	sp, #64	; 0x40
 8000b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b70:	2300      	movs	r3, #0
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b78:	4b59      	ldr	r3, [pc, #356]	; (8000ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	f003 030c 	and.w	r3, r3, #12
 8000b80:	2b08      	cmp	r3, #8
 8000b82:	d00d      	beq.n	8000ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8000b84:	2b08      	cmp	r3, #8
 8000b86:	f200 80a1 	bhi.w	8000ccc <HAL_RCC_GetSysClockFreq+0x16c>
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d002      	beq.n	8000b94 <HAL_RCC_GetSysClockFreq+0x34>
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d003      	beq.n	8000b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8000b92:	e09b      	b.n	8000ccc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b94:	4b53      	ldr	r3, [pc, #332]	; (8000ce4 <HAL_RCC_GetSysClockFreq+0x184>)
 8000b96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8000b98:	e09b      	b.n	8000cd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000b9a:	4b53      	ldr	r3, [pc, #332]	; (8000ce8 <HAL_RCC_GetSysClockFreq+0x188>)
 8000b9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8000b9e:	e098      	b.n	8000cd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ba0:	4b4f      	ldr	r3, [pc, #316]	; (8000ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000baa:	4b4d      	ldr	r3, [pc, #308]	; (8000ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d028      	beq.n	8000c08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb6:	4b4a      	ldr	r3, [pc, #296]	; (8000ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	099b      	lsrs	r3, r3, #6
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	623b      	str	r3, [r7, #32]
 8000bc0:	627a      	str	r2, [r7, #36]	; 0x24
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4b47      	ldr	r3, [pc, #284]	; (8000ce8 <HAL_RCC_GetSysClockFreq+0x188>)
 8000bcc:	fb03 f201 	mul.w	r2, r3, r1
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	fb00 f303 	mul.w	r3, r0, r3
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a43      	ldr	r2, [pc, #268]	; (8000ce8 <HAL_RCC_GetSysClockFreq+0x188>)
 8000bda:	fba0 1202 	umull	r1, r2, r0, r2
 8000bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000be0:	460a      	mov	r2, r1
 8000be2:	62ba      	str	r2, [r7, #40]	; 0x28
 8000be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000be6:	4413      	add	r3, r2
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bec:	2200      	movs	r2, #0
 8000bee:	61bb      	str	r3, [r7, #24]
 8000bf0:	61fa      	str	r2, [r7, #28]
 8000bf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000bf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000bfa:	f7ff fb05 	bl	8000208 <__aeabi_uldivmod>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	460b      	mov	r3, r1
 8000c02:	4613      	mov	r3, r2
 8000c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c06:	e053      	b.n	8000cb0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c08:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	099b      	lsrs	r3, r3, #6
 8000c0e:	2200      	movs	r2, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	617a      	str	r2, [r7, #20]
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8000c1a:	f04f 0b00 	mov.w	fp, #0
 8000c1e:	4652      	mov	r2, sl
 8000c20:	465b      	mov	r3, fp
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	f04f 0100 	mov.w	r1, #0
 8000c2a:	0159      	lsls	r1, r3, #5
 8000c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000c30:	0150      	lsls	r0, r2, #5
 8000c32:	4602      	mov	r2, r0
 8000c34:	460b      	mov	r3, r1
 8000c36:	ebb2 080a 	subs.w	r8, r2, sl
 8000c3a:	eb63 090b 	sbc.w	r9, r3, fp
 8000c3e:	f04f 0200 	mov.w	r2, #0
 8000c42:	f04f 0300 	mov.w	r3, #0
 8000c46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000c4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000c4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000c52:	ebb2 0408 	subs.w	r4, r2, r8
 8000c56:	eb63 0509 	sbc.w	r5, r3, r9
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	f04f 0300 	mov.w	r3, #0
 8000c62:	00eb      	lsls	r3, r5, #3
 8000c64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c68:	00e2      	lsls	r2, r4, #3
 8000c6a:	4614      	mov	r4, r2
 8000c6c:	461d      	mov	r5, r3
 8000c6e:	eb14 030a 	adds.w	r3, r4, sl
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	eb45 030b 	adc.w	r3, r5, fp
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	f04f 0200 	mov.w	r2, #0
 8000c7e:	f04f 0300 	mov.w	r3, #0
 8000c82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000c86:	4629      	mov	r1, r5
 8000c88:	028b      	lsls	r3, r1, #10
 8000c8a:	4621      	mov	r1, r4
 8000c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8000c90:	4621      	mov	r1, r4
 8000c92:	028a      	lsls	r2, r1, #10
 8000c94:	4610      	mov	r0, r2
 8000c96:	4619      	mov	r1, r3
 8000c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	60fa      	str	r2, [r7, #12]
 8000ca0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ca4:	f7ff fab0 	bl	8000208 <__aeabi_uldivmod>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4613      	mov	r3, r2
 8000cae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	0c1b      	lsrs	r3, r3, #16
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	3301      	adds	r3, #1
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8000cc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8000cca:	e002      	b.n	8000cd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_RCC_GetSysClockFreq+0x184>)
 8000cce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8000cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3740      	adds	r7, #64	; 0x40
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	00f42400 	.word	0x00f42400
 8000ce8:	017d7840 	.word	0x017d7840

08000cec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008

08000d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000d08:	f7ff fff0 	bl	8000cec <HAL_RCC_GetHCLKFreq>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	0a9b      	lsrs	r3, r3, #10
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	4903      	ldr	r1, [pc, #12]	; (8000d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d1a:	5ccb      	ldrb	r3, [r1, r3]
 8000d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800
 8000d28:	080023a0 	.word	0x080023a0

08000d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000d30:	f7ff ffdc 	bl	8000cec <HAL_RCC_GetHCLKFreq>
 8000d34:	4602      	mov	r2, r0
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	0b5b      	lsrs	r3, r3, #13
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	4903      	ldr	r1, [pc, #12]	; (8000d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d42:	5ccb      	ldrb	r3, [r1, r3]
 8000d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	080023a0 	.word	0x080023a0

08000d54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e040      	b.n	8000de8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d106      	bne.n	8000d7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f000 f83a 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2224      	movs	r2, #36	; 0x24
 8000d80:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0201 	bic.w	r2, r2, #1
 8000d90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 f8ba 	bl	8000f0c <UART_SetConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d101      	bne.n	8000da2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e022      	b.n	8000de8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 fb12 	bl	80013d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000dbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000dce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f042 0201 	orr.w	r2, r2, #1
 8000dde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 fb99 	bl	8001518 <UART_CheckIdleState>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	4613      	mov	r3, r2
 8000e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e18:	2b20      	cmp	r3, #32
 8000e1a:	d171      	bne.n	8000f00 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <HAL_UART_Transmit+0x24>
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d101      	bne.n	8000e2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e06a      	b.n	8000f02 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2221      	movs	r2, #33	; 0x21
 8000e38:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000e3a:	f7ff fbc7 	bl	80005cc <HAL_GetTick>
 8000e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	88fa      	ldrh	r2, [r7, #6]
 8000e44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	88fa      	ldrh	r2, [r7, #6]
 8000e4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e58:	d108      	bne.n	8000e6c <HAL_UART_Transmit+0x68>
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d104      	bne.n	8000e6c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	e003      	b.n	8000e74 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000e74:	e02c      	b.n	8000ed0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2180      	movs	r1, #128	; 0x80
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f000 fb80 	bl	8001586 <UART_WaitOnFlagUntilTimeout>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e038      	b.n	8000f02 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10b      	bne.n	8000eae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
 8000eac:	e007      	b.n	8000ebe <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1cc      	bne.n	8000e76 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2140      	movs	r1, #64	; 0x40
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	f000 fb4d 	bl	8001586 <UART_WaitOnFlagUntilTimeout>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e005      	b.n	8000f02 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2220      	movs	r2, #32
 8000efa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	e000      	b.n	8000f02 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8000f00:	2302      	movs	r3, #2
  }
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3720      	adds	r7, #32
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69db      	ldr	r3, [r3, #28]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4ba6      	ldr	r3, [pc, #664]	; (80011d0 <UART_SetConfig+0x2c4>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	6812      	ldr	r2, [r2, #0]
 8000f3e:	6979      	ldr	r1, [r7, #20]
 8000f40:	430b      	orrs	r3, r1
 8000f42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a94      	ldr	r2, [pc, #592]	; (80011d4 <UART_SetConfig+0x2c8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d120      	bne.n	8000fca <UART_SetConfig+0xbe>
 8000f88:	4b93      	ldr	r3, [pc, #588]	; (80011d8 <UART_SetConfig+0x2cc>)
 8000f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d816      	bhi.n	8000fc4 <UART_SetConfig+0xb8>
 8000f96:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <UART_SetConfig+0x90>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08000fad 	.word	0x08000fad
 8000fa0:	08000fb9 	.word	0x08000fb9
 8000fa4:	08000fb3 	.word	0x08000fb3
 8000fa8:	08000fbf 	.word	0x08000fbf
 8000fac:	2301      	movs	r3, #1
 8000fae:	77fb      	strb	r3, [r7, #31]
 8000fb0:	e150      	b.n	8001254 <UART_SetConfig+0x348>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	77fb      	strb	r3, [r7, #31]
 8000fb6:	e14d      	b.n	8001254 <UART_SetConfig+0x348>
 8000fb8:	2304      	movs	r3, #4
 8000fba:	77fb      	strb	r3, [r7, #31]
 8000fbc:	e14a      	b.n	8001254 <UART_SetConfig+0x348>
 8000fbe:	2308      	movs	r3, #8
 8000fc0:	77fb      	strb	r3, [r7, #31]
 8000fc2:	e147      	b.n	8001254 <UART_SetConfig+0x348>
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	77fb      	strb	r3, [r7, #31]
 8000fc8:	e144      	b.n	8001254 <UART_SetConfig+0x348>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a83      	ldr	r2, [pc, #524]	; (80011dc <UART_SetConfig+0x2d0>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d132      	bne.n	800103a <UART_SetConfig+0x12e>
 8000fd4:	4b80      	ldr	r3, [pc, #512]	; (80011d8 <UART_SetConfig+0x2cc>)
 8000fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fda:	f003 030c 	and.w	r3, r3, #12
 8000fde:	2b0c      	cmp	r3, #12
 8000fe0:	d828      	bhi.n	8001034 <UART_SetConfig+0x128>
 8000fe2:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <UART_SetConfig+0xdc>)
 8000fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe8:	0800101d 	.word	0x0800101d
 8000fec:	08001035 	.word	0x08001035
 8000ff0:	08001035 	.word	0x08001035
 8000ff4:	08001035 	.word	0x08001035
 8000ff8:	08001029 	.word	0x08001029
 8000ffc:	08001035 	.word	0x08001035
 8001000:	08001035 	.word	0x08001035
 8001004:	08001035 	.word	0x08001035
 8001008:	08001023 	.word	0x08001023
 800100c:	08001035 	.word	0x08001035
 8001010:	08001035 	.word	0x08001035
 8001014:	08001035 	.word	0x08001035
 8001018:	0800102f 	.word	0x0800102f
 800101c:	2300      	movs	r3, #0
 800101e:	77fb      	strb	r3, [r7, #31]
 8001020:	e118      	b.n	8001254 <UART_SetConfig+0x348>
 8001022:	2302      	movs	r3, #2
 8001024:	77fb      	strb	r3, [r7, #31]
 8001026:	e115      	b.n	8001254 <UART_SetConfig+0x348>
 8001028:	2304      	movs	r3, #4
 800102a:	77fb      	strb	r3, [r7, #31]
 800102c:	e112      	b.n	8001254 <UART_SetConfig+0x348>
 800102e:	2308      	movs	r3, #8
 8001030:	77fb      	strb	r3, [r7, #31]
 8001032:	e10f      	b.n	8001254 <UART_SetConfig+0x348>
 8001034:	2310      	movs	r3, #16
 8001036:	77fb      	strb	r3, [r7, #31]
 8001038:	e10c      	b.n	8001254 <UART_SetConfig+0x348>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a68      	ldr	r2, [pc, #416]	; (80011e0 <UART_SetConfig+0x2d4>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d120      	bne.n	8001086 <UART_SetConfig+0x17a>
 8001044:	4b64      	ldr	r3, [pc, #400]	; (80011d8 <UART_SetConfig+0x2cc>)
 8001046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800104a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800104e:	2b30      	cmp	r3, #48	; 0x30
 8001050:	d013      	beq.n	800107a <UART_SetConfig+0x16e>
 8001052:	2b30      	cmp	r3, #48	; 0x30
 8001054:	d814      	bhi.n	8001080 <UART_SetConfig+0x174>
 8001056:	2b20      	cmp	r3, #32
 8001058:	d009      	beq.n	800106e <UART_SetConfig+0x162>
 800105a:	2b20      	cmp	r3, #32
 800105c:	d810      	bhi.n	8001080 <UART_SetConfig+0x174>
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <UART_SetConfig+0x15c>
 8001062:	2b10      	cmp	r3, #16
 8001064:	d006      	beq.n	8001074 <UART_SetConfig+0x168>
 8001066:	e00b      	b.n	8001080 <UART_SetConfig+0x174>
 8001068:	2300      	movs	r3, #0
 800106a:	77fb      	strb	r3, [r7, #31]
 800106c:	e0f2      	b.n	8001254 <UART_SetConfig+0x348>
 800106e:	2302      	movs	r3, #2
 8001070:	77fb      	strb	r3, [r7, #31]
 8001072:	e0ef      	b.n	8001254 <UART_SetConfig+0x348>
 8001074:	2304      	movs	r3, #4
 8001076:	77fb      	strb	r3, [r7, #31]
 8001078:	e0ec      	b.n	8001254 <UART_SetConfig+0x348>
 800107a:	2308      	movs	r3, #8
 800107c:	77fb      	strb	r3, [r7, #31]
 800107e:	e0e9      	b.n	8001254 <UART_SetConfig+0x348>
 8001080:	2310      	movs	r3, #16
 8001082:	77fb      	strb	r3, [r7, #31]
 8001084:	e0e6      	b.n	8001254 <UART_SetConfig+0x348>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a56      	ldr	r2, [pc, #344]	; (80011e4 <UART_SetConfig+0x2d8>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d120      	bne.n	80010d2 <UART_SetConfig+0x1c6>
 8001090:	4b51      	ldr	r3, [pc, #324]	; (80011d8 <UART_SetConfig+0x2cc>)
 8001092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001096:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800109a:	2bc0      	cmp	r3, #192	; 0xc0
 800109c:	d013      	beq.n	80010c6 <UART_SetConfig+0x1ba>
 800109e:	2bc0      	cmp	r3, #192	; 0xc0
 80010a0:	d814      	bhi.n	80010cc <UART_SetConfig+0x1c0>
 80010a2:	2b80      	cmp	r3, #128	; 0x80
 80010a4:	d009      	beq.n	80010ba <UART_SetConfig+0x1ae>
 80010a6:	2b80      	cmp	r3, #128	; 0x80
 80010a8:	d810      	bhi.n	80010cc <UART_SetConfig+0x1c0>
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <UART_SetConfig+0x1a8>
 80010ae:	2b40      	cmp	r3, #64	; 0x40
 80010b0:	d006      	beq.n	80010c0 <UART_SetConfig+0x1b4>
 80010b2:	e00b      	b.n	80010cc <UART_SetConfig+0x1c0>
 80010b4:	2300      	movs	r3, #0
 80010b6:	77fb      	strb	r3, [r7, #31]
 80010b8:	e0cc      	b.n	8001254 <UART_SetConfig+0x348>
 80010ba:	2302      	movs	r3, #2
 80010bc:	77fb      	strb	r3, [r7, #31]
 80010be:	e0c9      	b.n	8001254 <UART_SetConfig+0x348>
 80010c0:	2304      	movs	r3, #4
 80010c2:	77fb      	strb	r3, [r7, #31]
 80010c4:	e0c6      	b.n	8001254 <UART_SetConfig+0x348>
 80010c6:	2308      	movs	r3, #8
 80010c8:	77fb      	strb	r3, [r7, #31]
 80010ca:	e0c3      	b.n	8001254 <UART_SetConfig+0x348>
 80010cc:	2310      	movs	r3, #16
 80010ce:	77fb      	strb	r3, [r7, #31]
 80010d0:	e0c0      	b.n	8001254 <UART_SetConfig+0x348>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a44      	ldr	r2, [pc, #272]	; (80011e8 <UART_SetConfig+0x2dc>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d125      	bne.n	8001128 <UART_SetConfig+0x21c>
 80010dc:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <UART_SetConfig+0x2cc>)
 80010de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80010ea:	d017      	beq.n	800111c <UART_SetConfig+0x210>
 80010ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80010f0:	d817      	bhi.n	8001122 <UART_SetConfig+0x216>
 80010f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f6:	d00b      	beq.n	8001110 <UART_SetConfig+0x204>
 80010f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010fc:	d811      	bhi.n	8001122 <UART_SetConfig+0x216>
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <UART_SetConfig+0x1fe>
 8001102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001106:	d006      	beq.n	8001116 <UART_SetConfig+0x20a>
 8001108:	e00b      	b.n	8001122 <UART_SetConfig+0x216>
 800110a:	2300      	movs	r3, #0
 800110c:	77fb      	strb	r3, [r7, #31]
 800110e:	e0a1      	b.n	8001254 <UART_SetConfig+0x348>
 8001110:	2302      	movs	r3, #2
 8001112:	77fb      	strb	r3, [r7, #31]
 8001114:	e09e      	b.n	8001254 <UART_SetConfig+0x348>
 8001116:	2304      	movs	r3, #4
 8001118:	77fb      	strb	r3, [r7, #31]
 800111a:	e09b      	b.n	8001254 <UART_SetConfig+0x348>
 800111c:	2308      	movs	r3, #8
 800111e:	77fb      	strb	r3, [r7, #31]
 8001120:	e098      	b.n	8001254 <UART_SetConfig+0x348>
 8001122:	2310      	movs	r3, #16
 8001124:	77fb      	strb	r3, [r7, #31]
 8001126:	e095      	b.n	8001254 <UART_SetConfig+0x348>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a2f      	ldr	r2, [pc, #188]	; (80011ec <UART_SetConfig+0x2e0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d125      	bne.n	800117e <UART_SetConfig+0x272>
 8001132:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <UART_SetConfig+0x2cc>)
 8001134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001138:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800113c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001140:	d017      	beq.n	8001172 <UART_SetConfig+0x266>
 8001142:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001146:	d817      	bhi.n	8001178 <UART_SetConfig+0x26c>
 8001148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800114c:	d00b      	beq.n	8001166 <UART_SetConfig+0x25a>
 800114e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001152:	d811      	bhi.n	8001178 <UART_SetConfig+0x26c>
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <UART_SetConfig+0x254>
 8001158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115c:	d006      	beq.n	800116c <UART_SetConfig+0x260>
 800115e:	e00b      	b.n	8001178 <UART_SetConfig+0x26c>
 8001160:	2301      	movs	r3, #1
 8001162:	77fb      	strb	r3, [r7, #31]
 8001164:	e076      	b.n	8001254 <UART_SetConfig+0x348>
 8001166:	2302      	movs	r3, #2
 8001168:	77fb      	strb	r3, [r7, #31]
 800116a:	e073      	b.n	8001254 <UART_SetConfig+0x348>
 800116c:	2304      	movs	r3, #4
 800116e:	77fb      	strb	r3, [r7, #31]
 8001170:	e070      	b.n	8001254 <UART_SetConfig+0x348>
 8001172:	2308      	movs	r3, #8
 8001174:	77fb      	strb	r3, [r7, #31]
 8001176:	e06d      	b.n	8001254 <UART_SetConfig+0x348>
 8001178:	2310      	movs	r3, #16
 800117a:	77fb      	strb	r3, [r7, #31]
 800117c:	e06a      	b.n	8001254 <UART_SetConfig+0x348>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <UART_SetConfig+0x2e4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d138      	bne.n	80011fa <UART_SetConfig+0x2ee>
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <UART_SetConfig+0x2cc>)
 800118a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800118e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001192:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001196:	d017      	beq.n	80011c8 <UART_SetConfig+0x2bc>
 8001198:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800119c:	d82a      	bhi.n	80011f4 <UART_SetConfig+0x2e8>
 800119e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a2:	d00b      	beq.n	80011bc <UART_SetConfig+0x2b0>
 80011a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a8:	d824      	bhi.n	80011f4 <UART_SetConfig+0x2e8>
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <UART_SetConfig+0x2aa>
 80011ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011b2:	d006      	beq.n	80011c2 <UART_SetConfig+0x2b6>
 80011b4:	e01e      	b.n	80011f4 <UART_SetConfig+0x2e8>
 80011b6:	2300      	movs	r3, #0
 80011b8:	77fb      	strb	r3, [r7, #31]
 80011ba:	e04b      	b.n	8001254 <UART_SetConfig+0x348>
 80011bc:	2302      	movs	r3, #2
 80011be:	77fb      	strb	r3, [r7, #31]
 80011c0:	e048      	b.n	8001254 <UART_SetConfig+0x348>
 80011c2:	2304      	movs	r3, #4
 80011c4:	77fb      	strb	r3, [r7, #31]
 80011c6:	e045      	b.n	8001254 <UART_SetConfig+0x348>
 80011c8:	2308      	movs	r3, #8
 80011ca:	77fb      	strb	r3, [r7, #31]
 80011cc:	e042      	b.n	8001254 <UART_SetConfig+0x348>
 80011ce:	bf00      	nop
 80011d0:	efff69f3 	.word	0xefff69f3
 80011d4:	40011000 	.word	0x40011000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40004400 	.word	0x40004400
 80011e0:	40004800 	.word	0x40004800
 80011e4:	40004c00 	.word	0x40004c00
 80011e8:	40005000 	.word	0x40005000
 80011ec:	40011400 	.word	0x40011400
 80011f0:	40007800 	.word	0x40007800
 80011f4:	2310      	movs	r3, #16
 80011f6:	77fb      	strb	r3, [r7, #31]
 80011f8:	e02c      	b.n	8001254 <UART_SetConfig+0x348>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a72      	ldr	r2, [pc, #456]	; (80013c8 <UART_SetConfig+0x4bc>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d125      	bne.n	8001250 <UART_SetConfig+0x344>
 8001204:	4b71      	ldr	r3, [pc, #452]	; (80013cc <UART_SetConfig+0x4c0>)
 8001206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800120e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001212:	d017      	beq.n	8001244 <UART_SetConfig+0x338>
 8001214:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001218:	d817      	bhi.n	800124a <UART_SetConfig+0x33e>
 800121a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800121e:	d00b      	beq.n	8001238 <UART_SetConfig+0x32c>
 8001220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001224:	d811      	bhi.n	800124a <UART_SetConfig+0x33e>
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <UART_SetConfig+0x326>
 800122a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800122e:	d006      	beq.n	800123e <UART_SetConfig+0x332>
 8001230:	e00b      	b.n	800124a <UART_SetConfig+0x33e>
 8001232:	2300      	movs	r3, #0
 8001234:	77fb      	strb	r3, [r7, #31]
 8001236:	e00d      	b.n	8001254 <UART_SetConfig+0x348>
 8001238:	2302      	movs	r3, #2
 800123a:	77fb      	strb	r3, [r7, #31]
 800123c:	e00a      	b.n	8001254 <UART_SetConfig+0x348>
 800123e:	2304      	movs	r3, #4
 8001240:	77fb      	strb	r3, [r7, #31]
 8001242:	e007      	b.n	8001254 <UART_SetConfig+0x348>
 8001244:	2308      	movs	r3, #8
 8001246:	77fb      	strb	r3, [r7, #31]
 8001248:	e004      	b.n	8001254 <UART_SetConfig+0x348>
 800124a:	2310      	movs	r3, #16
 800124c:	77fb      	strb	r3, [r7, #31]
 800124e:	e001      	b.n	8001254 <UART_SetConfig+0x348>
 8001250:	2310      	movs	r3, #16
 8001252:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800125c:	d15b      	bne.n	8001316 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800125e:	7ffb      	ldrb	r3, [r7, #31]
 8001260:	2b08      	cmp	r3, #8
 8001262:	d828      	bhi.n	80012b6 <UART_SetConfig+0x3aa>
 8001264:	a201      	add	r2, pc, #4	; (adr r2, 800126c <UART_SetConfig+0x360>)
 8001266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126a:	bf00      	nop
 800126c:	08001291 	.word	0x08001291
 8001270:	08001299 	.word	0x08001299
 8001274:	080012a1 	.word	0x080012a1
 8001278:	080012b7 	.word	0x080012b7
 800127c:	080012a7 	.word	0x080012a7
 8001280:	080012b7 	.word	0x080012b7
 8001284:	080012b7 	.word	0x080012b7
 8001288:	080012b7 	.word	0x080012b7
 800128c:	080012af 	.word	0x080012af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001290:	f7ff fd38 	bl	8000d04 <HAL_RCC_GetPCLK1Freq>
 8001294:	61b8      	str	r0, [r7, #24]
        break;
 8001296:	e013      	b.n	80012c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001298:	f7ff fd48 	bl	8000d2c <HAL_RCC_GetPCLK2Freq>
 800129c:	61b8      	str	r0, [r7, #24]
        break;
 800129e:	e00f      	b.n	80012c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80012a0:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <UART_SetConfig+0x4c4>)
 80012a2:	61bb      	str	r3, [r7, #24]
        break;
 80012a4:	e00c      	b.n	80012c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80012a6:	f7ff fc5b 	bl	8000b60 <HAL_RCC_GetSysClockFreq>
 80012aa:	61b8      	str	r0, [r7, #24]
        break;
 80012ac:	e008      	b.n	80012c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80012ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012b2:	61bb      	str	r3, [r7, #24]
        break;
 80012b4:	e004      	b.n	80012c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	77bb      	strb	r3, [r7, #30]
        break;
 80012be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d074      	beq.n	80013b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	005a      	lsls	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	441a      	add	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	2b0f      	cmp	r3, #15
 80012e0:	d916      	bls.n	8001310 <UART_SetConfig+0x404>
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e8:	d212      	bcs.n	8001310 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	f023 030f 	bic.w	r3, r3, #15
 80012f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	085b      	lsrs	r3, r3, #1
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	b29a      	uxth	r2, r3
 8001300:	89fb      	ldrh	r3, [r7, #14]
 8001302:	4313      	orrs	r3, r2
 8001304:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	89fa      	ldrh	r2, [r7, #14]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	e04f      	b.n	80013b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	77bb      	strb	r3, [r7, #30]
 8001314:	e04c      	b.n	80013b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001316:	7ffb      	ldrb	r3, [r7, #31]
 8001318:	2b08      	cmp	r3, #8
 800131a:	d828      	bhi.n	800136e <UART_SetConfig+0x462>
 800131c:	a201      	add	r2, pc, #4	; (adr r2, 8001324 <UART_SetConfig+0x418>)
 800131e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001322:	bf00      	nop
 8001324:	08001349 	.word	0x08001349
 8001328:	08001351 	.word	0x08001351
 800132c:	08001359 	.word	0x08001359
 8001330:	0800136f 	.word	0x0800136f
 8001334:	0800135f 	.word	0x0800135f
 8001338:	0800136f 	.word	0x0800136f
 800133c:	0800136f 	.word	0x0800136f
 8001340:	0800136f 	.word	0x0800136f
 8001344:	08001367 	.word	0x08001367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001348:	f7ff fcdc 	bl	8000d04 <HAL_RCC_GetPCLK1Freq>
 800134c:	61b8      	str	r0, [r7, #24]
        break;
 800134e:	e013      	b.n	8001378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001350:	f7ff fcec 	bl	8000d2c <HAL_RCC_GetPCLK2Freq>
 8001354:	61b8      	str	r0, [r7, #24]
        break;
 8001356:	e00f      	b.n	8001378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <UART_SetConfig+0x4c4>)
 800135a:	61bb      	str	r3, [r7, #24]
        break;
 800135c:	e00c      	b.n	8001378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800135e:	f7ff fbff 	bl	8000b60 <HAL_RCC_GetSysClockFreq>
 8001362:	61b8      	str	r0, [r7, #24]
        break;
 8001364:	e008      	b.n	8001378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800136a:	61bb      	str	r3, [r7, #24]
        break;
 800136c:	e004      	b.n	8001378 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	77bb      	strb	r3, [r7, #30]
        break;
 8001376:	bf00      	nop
    }

    if (pclk != 0U)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d018      	beq.n	80013b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	085a      	lsrs	r2, r3, #1
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	441a      	add	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001390:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d909      	bls.n	80013ac <UART_SetConfig+0x4a0>
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139e:	d205      	bcs.n	80013ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	e001      	b.n	80013b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80013bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3720      	adds	r7, #32
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40007c00 	.word	0x40007c00
 80013cc:	40023800 	.word	0x40023800
 80013d0:	00f42400 	.word	0x00f42400

080013d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00a      	beq.n	80013fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00a      	beq.n	8001420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00a      	beq.n	8001442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00a      	beq.n	8001464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00a      	beq.n	8001486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00a      	beq.n	80014a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01a      	beq.n	80014ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014d2:	d10a      	bne.n	80014ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00a      	beq.n	800150c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	605a      	str	r2, [r3, #4]
  }
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af02      	add	r7, sp, #8
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001528:	f7ff f850 	bl	80005cc <HAL_GetTick>
 800152c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b08      	cmp	r3, #8
 800153a:	d10e      	bne.n	800155a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800153c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f81b 	bl	8001586 <UART_WaitOnFlagUntilTimeout>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e011      	b.n	800157e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2220      	movs	r2, #32
 800155e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2220      	movs	r2, #32
 8001564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4613      	mov	r3, r2
 8001594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001596:	e040      	b.n	800161a <UART_WaitOnFlagUntilTimeout+0x94>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159e:	d03c      	beq.n	800161a <UART_WaitOnFlagUntilTimeout+0x94>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015a0:	f7ff f814 	bl	80005cc <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d302      	bcc.n	80015b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10c      	bne.n	80015d0 <UART_WaitOnFlagUntilTimeout+0x4a>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
//        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
//        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

        huart->gState = HAL_UART_STATE_READY;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2220      	movs	r2, #32
 80015ba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2220      	movs	r2, #32
 80015c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e034      	b.n	800163a <UART_WaitOnFlagUntilTimeout+0xb4>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d01d      	beq.n	800161a <UART_WaitOnFlagUntilTimeout+0x94>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015ec:	d115      	bne.n	800161a <UART_WaitOnFlagUntilTimeout+0x94>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015f6:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
//          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
//          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2220      	movs	r2, #32
 80015fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2220      	movs	r2, #32
 8001602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2220      	movs	r2, #32
 800160a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e00f      	b.n	800163a <UART_WaitOnFlagUntilTimeout+0xb4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	69da      	ldr	r2, [r3, #28]
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4013      	ands	r3, r2
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	429a      	cmp	r2, r3
 8001628:	bf0c      	ite	eq
 800162a:	2301      	moveq	r3, #1
 800162c:	2300      	movne	r3, #0
 800162e:	b2db      	uxtb	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	429a      	cmp	r2, r3
 8001636:	d0af      	beq.n	8001598 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <UART3_Init>:
#include <string.h>

UART_HandleTypeDef huart3;

void UART3_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 800164a:	4b32      	ldr	r3, [pc, #200]	; (8001714 <UART3_Init+0xd0>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a31      	ldr	r2, [pc, #196]	; (8001714 <UART3_Init+0xd0>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <UART3_Init+0xd0>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001662:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <UART3_Init+0xd0>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a2b      	ldr	r2, [pc, #172]	; (8001714 <UART3_Init+0xd0>)
 8001668:	f043 0308 	orr.w	r3, r3, #8
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b29      	ldr	r3, [pc, #164]	; (8001714 <UART3_Init+0xd0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]

    // PD8 = TX
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800168a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001694:	2301      	movs	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800169c:	2307      	movs	r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	4619      	mov	r1, r3
 80016a6:	481c      	ldr	r0, [pc, #112]	; (8001718 <UART3_Init+0xd4>)
 80016a8:	f7ff f8a6 	bl	80007f8 <HAL_GPIO_Init>

    // PD9 = RX
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ba:	2307      	movs	r3, #7
 80016bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	4619      	mov	r1, r3
 80016c4:	4814      	ldr	r0, [pc, #80]	; (8001718 <UART3_Init+0xd4>)
 80016c6:	f7ff f897 	bl	80007f8 <HAL_GPIO_Init>

    huart3.Instance          = USART3;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <UART3_Init+0xd8>)
 80016cc:	4a14      	ldr	r2, [pc, #80]	; (8001720 <UART3_Init+0xdc>)
 80016ce:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate     = 115200;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <UART3_Init+0xd8>)
 80016d2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d6:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength   = UART_WORDLENGTH_8B;
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <UART3_Init+0xd8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits     = UART_STOPBITS_1;
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <UART3_Init+0xd8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity       = UART_PARITY_NONE;
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <UART3_Init+0xd8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode         = UART_MODE_TX_RX;
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <UART3_Init+0xd8>)
 80016ec:	220c      	movs	r2, #12
 80016ee:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <UART3_Init+0xd8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <UART3_Init+0xd8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart3) != HAL_OK)
 80016fc:	4807      	ldr	r0, [pc, #28]	; (800171c <UART3_Init+0xd8>)
 80016fe:	f7ff fb29 	bl	8000d54 <HAL_UART_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d000      	beq.n	800170a <UART3_Init+0xc6>
    {
        while (1); // init error
 8001708:	e7fe      	b.n	8001708 <UART3_Init+0xc4>
    }
}
 800170a:	bf00      	nop
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	40020c00 	.word	0x40020c00
 800171c:	20000090 	.word	0x20000090
 8001720:	40004800 	.word	0x40004800

08001724 <__io_putchar>:

int __io_putchar(int ch)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 10);
 800172c:	1d39      	adds	r1, r7, #4
 800172e:	230a      	movs	r3, #10
 8001730:	2201      	movs	r2, #1
 8001732:	4804      	ldr	r0, [pc, #16]	; (8001744 <__io_putchar+0x20>)
 8001734:	f7ff fb66 	bl	8000e04 <HAL_UART_Transmit>
	return ch;
 8001738:	687b      	ldr	r3, [r7, #4]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000090 	.word	0x20000090

08001748 <main>:



int main(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
    HAL_Init();
 800174c:	f7fe fede 	bl	800050c <HAL_Init>
    UART3_Init();
 8001750:	f7ff ff78 	bl	8001644 <UART3_Init>

    while (1)
    {
        printf("Printf is being used: \r\n");
 8001754:	4803      	ldr	r0, [pc, #12]	; (8001764 <main+0x1c>)
 8001756:	f000 f97b 	bl	8001a50 <puts>
        HAL_Delay(1000); // 1 sec gap so string doesn’t overlap
 800175a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800175e:	f7fe ff41 	bl	80005e4 <HAL_Delay>
        printf("Printf is being used: \r\n");
 8001762:	e7f7      	b.n	8001754 <main+0xc>
 8001764:	08002388 	.word	0x08002388

08001768 <SysTick_Handler>:
    }
}

// minimal SysTick handler
void SysTick_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800176c:	f7fe ff1a 	bl	80005a4 <HAL_IncTick>
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e00a      	b.n	800179c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001786:	f3af 8000 	nop.w
 800178a:	4601      	mov	r1, r0
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60ba      	str	r2, [r7, #8]
 8001792:	b2ca      	uxtb	r2, r1
 8001794:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbf0      	blt.n	8001786 <_read+0x12>
	}

return len;
 80017a4:	687b      	ldr	r3, [r7, #4]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	e009      	b.n	80017d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60ba      	str	r2, [r7, #8]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ffab 	bl	8001724 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	3301      	adds	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbf1      	blt.n	80017c0 <_write+0x12>
	}
	return len;
 80017dc:	687b      	ldr	r3, [r7, #4]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_close>:

int _close(int file)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
	return -1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800180e:	605a      	str	r2, [r3, #4]
	return 0;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <_isatty>:

int _isatty(int file)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
	return 1;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	return 0;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f000 f846 	bl	8001910 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20050000 	.word	0x20050000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	20000118 	.word	0x20000118
 80018b8:	20000130 	.word	0x20000130

080018bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80018c6:	490d      	ldr	r1, [pc, #52]	; (80018fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <LoopForever+0xe>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018dc:	4c0a      	ldr	r4, [pc, #40]	; (8001908 <LoopForever+0x16>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018ea:	f000 f817 	bl	800191c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ee:	f7ff ff2b 	bl	8001748 <main>

080018f2 <LoopForever>:

LoopForever:
    b LoopForever
 80018f2:	e7fe      	b.n	80018f2 <LoopForever>
  ldr   r0, =_estack
 80018f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001900:	0800241c 	.word	0x0800241c
  ldr r2, =_sbss
 8001904:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001908:	2000012c 	.word	0x2000012c

0800190c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC_IRQHandler>
	...

08001910 <__errno>:
 8001910:	4b01      	ldr	r3, [pc, #4]	; (8001918 <__errno+0x8>)
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	2000000c 	.word	0x2000000c

0800191c <__libc_init_array>:
 800191c:	b570      	push	{r4, r5, r6, lr}
 800191e:	4d0d      	ldr	r5, [pc, #52]	; (8001954 <__libc_init_array+0x38>)
 8001920:	4c0d      	ldr	r4, [pc, #52]	; (8001958 <__libc_init_array+0x3c>)
 8001922:	1b64      	subs	r4, r4, r5
 8001924:	10a4      	asrs	r4, r4, #2
 8001926:	2600      	movs	r6, #0
 8001928:	42a6      	cmp	r6, r4
 800192a:	d109      	bne.n	8001940 <__libc_init_array+0x24>
 800192c:	4d0b      	ldr	r5, [pc, #44]	; (800195c <__libc_init_array+0x40>)
 800192e:	4c0c      	ldr	r4, [pc, #48]	; (8001960 <__libc_init_array+0x44>)
 8001930:	f000 fd1e 	bl	8002370 <_init>
 8001934:	1b64      	subs	r4, r4, r5
 8001936:	10a4      	asrs	r4, r4, #2
 8001938:	2600      	movs	r6, #0
 800193a:	42a6      	cmp	r6, r4
 800193c:	d105      	bne.n	800194a <__libc_init_array+0x2e>
 800193e:	bd70      	pop	{r4, r5, r6, pc}
 8001940:	f855 3b04 	ldr.w	r3, [r5], #4
 8001944:	4798      	blx	r3
 8001946:	3601      	adds	r6, #1
 8001948:	e7ee      	b.n	8001928 <__libc_init_array+0xc>
 800194a:	f855 3b04 	ldr.w	r3, [r5], #4
 800194e:	4798      	blx	r3
 8001950:	3601      	adds	r6, #1
 8001952:	e7f2      	b.n	800193a <__libc_init_array+0x1e>
 8001954:	08002414 	.word	0x08002414
 8001958:	08002414 	.word	0x08002414
 800195c:	08002414 	.word	0x08002414
 8001960:	08002418 	.word	0x08002418

08001964 <memset>:
 8001964:	4402      	add	r2, r0
 8001966:	4603      	mov	r3, r0
 8001968:	4293      	cmp	r3, r2
 800196a:	d100      	bne.n	800196e <memset+0xa>
 800196c:	4770      	bx	lr
 800196e:	f803 1b01 	strb.w	r1, [r3], #1
 8001972:	e7f9      	b.n	8001968 <memset+0x4>

08001974 <_puts_r>:
 8001974:	b570      	push	{r4, r5, r6, lr}
 8001976:	460e      	mov	r6, r1
 8001978:	4605      	mov	r5, r0
 800197a:	b118      	cbz	r0, 8001984 <_puts_r+0x10>
 800197c:	6983      	ldr	r3, [r0, #24]
 800197e:	b90b      	cbnz	r3, 8001984 <_puts_r+0x10>
 8001980:	f000 fa48 	bl	8001e14 <__sinit>
 8001984:	69ab      	ldr	r3, [r5, #24]
 8001986:	68ac      	ldr	r4, [r5, #8]
 8001988:	b913      	cbnz	r3, 8001990 <_puts_r+0x1c>
 800198a:	4628      	mov	r0, r5
 800198c:	f000 fa42 	bl	8001e14 <__sinit>
 8001990:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <_puts_r+0xd0>)
 8001992:	429c      	cmp	r4, r3
 8001994:	d120      	bne.n	80019d8 <_puts_r+0x64>
 8001996:	686c      	ldr	r4, [r5, #4]
 8001998:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800199a:	07db      	lsls	r3, r3, #31
 800199c:	d405      	bmi.n	80019aa <_puts_r+0x36>
 800199e:	89a3      	ldrh	r3, [r4, #12]
 80019a0:	0598      	lsls	r0, r3, #22
 80019a2:	d402      	bmi.n	80019aa <_puts_r+0x36>
 80019a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019a6:	f000 fad3 	bl	8001f50 <__retarget_lock_acquire_recursive>
 80019aa:	89a3      	ldrh	r3, [r4, #12]
 80019ac:	0719      	lsls	r1, r3, #28
 80019ae:	d51d      	bpl.n	80019ec <_puts_r+0x78>
 80019b0:	6923      	ldr	r3, [r4, #16]
 80019b2:	b1db      	cbz	r3, 80019ec <_puts_r+0x78>
 80019b4:	3e01      	subs	r6, #1
 80019b6:	68a3      	ldr	r3, [r4, #8]
 80019b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80019bc:	3b01      	subs	r3, #1
 80019be:	60a3      	str	r3, [r4, #8]
 80019c0:	bb39      	cbnz	r1, 8001a12 <_puts_r+0x9e>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	da38      	bge.n	8001a38 <_puts_r+0xc4>
 80019c6:	4622      	mov	r2, r4
 80019c8:	210a      	movs	r1, #10
 80019ca:	4628      	mov	r0, r5
 80019cc:	f000 f848 	bl	8001a60 <__swbuf_r>
 80019d0:	3001      	adds	r0, #1
 80019d2:	d011      	beq.n	80019f8 <_puts_r+0x84>
 80019d4:	250a      	movs	r5, #10
 80019d6:	e011      	b.n	80019fc <_puts_r+0x88>
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <_puts_r+0xd4>)
 80019da:	429c      	cmp	r4, r3
 80019dc:	d101      	bne.n	80019e2 <_puts_r+0x6e>
 80019de:	68ac      	ldr	r4, [r5, #8]
 80019e0:	e7da      	b.n	8001998 <_puts_r+0x24>
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <_puts_r+0xd8>)
 80019e4:	429c      	cmp	r4, r3
 80019e6:	bf08      	it	eq
 80019e8:	68ec      	ldreq	r4, [r5, #12]
 80019ea:	e7d5      	b.n	8001998 <_puts_r+0x24>
 80019ec:	4621      	mov	r1, r4
 80019ee:	4628      	mov	r0, r5
 80019f0:	f000 f888 	bl	8001b04 <__swsetup_r>
 80019f4:	2800      	cmp	r0, #0
 80019f6:	d0dd      	beq.n	80019b4 <_puts_r+0x40>
 80019f8:	f04f 35ff 	mov.w	r5, #4294967295
 80019fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019fe:	07da      	lsls	r2, r3, #31
 8001a00:	d405      	bmi.n	8001a0e <_puts_r+0x9a>
 8001a02:	89a3      	ldrh	r3, [r4, #12]
 8001a04:	059b      	lsls	r3, r3, #22
 8001a06:	d402      	bmi.n	8001a0e <_puts_r+0x9a>
 8001a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a0a:	f000 faa2 	bl	8001f52 <__retarget_lock_release_recursive>
 8001a0e:	4628      	mov	r0, r5
 8001a10:	bd70      	pop	{r4, r5, r6, pc}
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	da04      	bge.n	8001a20 <_puts_r+0xac>
 8001a16:	69a2      	ldr	r2, [r4, #24]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dc06      	bgt.n	8001a2a <_puts_r+0xb6>
 8001a1c:	290a      	cmp	r1, #10
 8001a1e:	d004      	beq.n	8001a2a <_puts_r+0xb6>
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	6022      	str	r2, [r4, #0]
 8001a26:	7019      	strb	r1, [r3, #0]
 8001a28:	e7c5      	b.n	80019b6 <_puts_r+0x42>
 8001a2a:	4622      	mov	r2, r4
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	f000 f817 	bl	8001a60 <__swbuf_r>
 8001a32:	3001      	adds	r0, #1
 8001a34:	d1bf      	bne.n	80019b6 <_puts_r+0x42>
 8001a36:	e7df      	b.n	80019f8 <_puts_r+0x84>
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	250a      	movs	r5, #10
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	6022      	str	r2, [r4, #0]
 8001a40:	701d      	strb	r5, [r3, #0]
 8001a42:	e7db      	b.n	80019fc <_puts_r+0x88>
 8001a44:	080023cc 	.word	0x080023cc
 8001a48:	080023ec 	.word	0x080023ec
 8001a4c:	080023ac 	.word	0x080023ac

08001a50 <puts>:
 8001a50:	4b02      	ldr	r3, [pc, #8]	; (8001a5c <puts+0xc>)
 8001a52:	4601      	mov	r1, r0
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	f7ff bf8d 	b.w	8001974 <_puts_r>
 8001a5a:	bf00      	nop
 8001a5c:	2000000c 	.word	0x2000000c

08001a60 <__swbuf_r>:
 8001a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a62:	460e      	mov	r6, r1
 8001a64:	4614      	mov	r4, r2
 8001a66:	4605      	mov	r5, r0
 8001a68:	b118      	cbz	r0, 8001a72 <__swbuf_r+0x12>
 8001a6a:	6983      	ldr	r3, [r0, #24]
 8001a6c:	b90b      	cbnz	r3, 8001a72 <__swbuf_r+0x12>
 8001a6e:	f000 f9d1 	bl	8001e14 <__sinit>
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <__swbuf_r+0x98>)
 8001a74:	429c      	cmp	r4, r3
 8001a76:	d12b      	bne.n	8001ad0 <__swbuf_r+0x70>
 8001a78:	686c      	ldr	r4, [r5, #4]
 8001a7a:	69a3      	ldr	r3, [r4, #24]
 8001a7c:	60a3      	str	r3, [r4, #8]
 8001a7e:	89a3      	ldrh	r3, [r4, #12]
 8001a80:	071a      	lsls	r2, r3, #28
 8001a82:	d52f      	bpl.n	8001ae4 <__swbuf_r+0x84>
 8001a84:	6923      	ldr	r3, [r4, #16]
 8001a86:	b36b      	cbz	r3, 8001ae4 <__swbuf_r+0x84>
 8001a88:	6923      	ldr	r3, [r4, #16]
 8001a8a:	6820      	ldr	r0, [r4, #0]
 8001a8c:	1ac0      	subs	r0, r0, r3
 8001a8e:	6963      	ldr	r3, [r4, #20]
 8001a90:	b2f6      	uxtb	r6, r6
 8001a92:	4283      	cmp	r3, r0
 8001a94:	4637      	mov	r7, r6
 8001a96:	dc04      	bgt.n	8001aa2 <__swbuf_r+0x42>
 8001a98:	4621      	mov	r1, r4
 8001a9a:	4628      	mov	r0, r5
 8001a9c:	f000 f926 	bl	8001cec <_fflush_r>
 8001aa0:	bb30      	cbnz	r0, 8001af0 <__swbuf_r+0x90>
 8001aa2:	68a3      	ldr	r3, [r4, #8]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	60a3      	str	r3, [r4, #8]
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	6022      	str	r2, [r4, #0]
 8001aae:	701e      	strb	r6, [r3, #0]
 8001ab0:	6963      	ldr	r3, [r4, #20]
 8001ab2:	3001      	adds	r0, #1
 8001ab4:	4283      	cmp	r3, r0
 8001ab6:	d004      	beq.n	8001ac2 <__swbuf_r+0x62>
 8001ab8:	89a3      	ldrh	r3, [r4, #12]
 8001aba:	07db      	lsls	r3, r3, #31
 8001abc:	d506      	bpl.n	8001acc <__swbuf_r+0x6c>
 8001abe:	2e0a      	cmp	r6, #10
 8001ac0:	d104      	bne.n	8001acc <__swbuf_r+0x6c>
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	f000 f911 	bl	8001cec <_fflush_r>
 8001aca:	b988      	cbnz	r0, 8001af0 <__swbuf_r+0x90>
 8001acc:	4638      	mov	r0, r7
 8001ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <__swbuf_r+0x9c>)
 8001ad2:	429c      	cmp	r4, r3
 8001ad4:	d101      	bne.n	8001ada <__swbuf_r+0x7a>
 8001ad6:	68ac      	ldr	r4, [r5, #8]
 8001ad8:	e7cf      	b.n	8001a7a <__swbuf_r+0x1a>
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <__swbuf_r+0xa0>)
 8001adc:	429c      	cmp	r4, r3
 8001ade:	bf08      	it	eq
 8001ae0:	68ec      	ldreq	r4, [r5, #12]
 8001ae2:	e7ca      	b.n	8001a7a <__swbuf_r+0x1a>
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f000 f80c 	bl	8001b04 <__swsetup_r>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	d0cb      	beq.n	8001a88 <__swbuf_r+0x28>
 8001af0:	f04f 37ff 	mov.w	r7, #4294967295
 8001af4:	e7ea      	b.n	8001acc <__swbuf_r+0x6c>
 8001af6:	bf00      	nop
 8001af8:	080023cc 	.word	0x080023cc
 8001afc:	080023ec 	.word	0x080023ec
 8001b00:	080023ac 	.word	0x080023ac

08001b04 <__swsetup_r>:
 8001b04:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <__swsetup_r+0xcc>)
 8001b06:	b570      	push	{r4, r5, r6, lr}
 8001b08:	681d      	ldr	r5, [r3, #0]
 8001b0a:	4606      	mov	r6, r0
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	b125      	cbz	r5, 8001b1a <__swsetup_r+0x16>
 8001b10:	69ab      	ldr	r3, [r5, #24]
 8001b12:	b913      	cbnz	r3, 8001b1a <__swsetup_r+0x16>
 8001b14:	4628      	mov	r0, r5
 8001b16:	f000 f97d 	bl	8001e14 <__sinit>
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <__swsetup_r+0xd0>)
 8001b1c:	429c      	cmp	r4, r3
 8001b1e:	d10f      	bne.n	8001b40 <__swsetup_r+0x3c>
 8001b20:	686c      	ldr	r4, [r5, #4]
 8001b22:	89a3      	ldrh	r3, [r4, #12]
 8001b24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b28:	0719      	lsls	r1, r3, #28
 8001b2a:	d42c      	bmi.n	8001b86 <__swsetup_r+0x82>
 8001b2c:	06dd      	lsls	r5, r3, #27
 8001b2e:	d411      	bmi.n	8001b54 <__swsetup_r+0x50>
 8001b30:	2309      	movs	r3, #9
 8001b32:	6033      	str	r3, [r6, #0]
 8001b34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001b38:	81a3      	strh	r3, [r4, #12]
 8001b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3e:	e03e      	b.n	8001bbe <__swsetup_r+0xba>
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <__swsetup_r+0xd4>)
 8001b42:	429c      	cmp	r4, r3
 8001b44:	d101      	bne.n	8001b4a <__swsetup_r+0x46>
 8001b46:	68ac      	ldr	r4, [r5, #8]
 8001b48:	e7eb      	b.n	8001b22 <__swsetup_r+0x1e>
 8001b4a:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <__swsetup_r+0xd8>)
 8001b4c:	429c      	cmp	r4, r3
 8001b4e:	bf08      	it	eq
 8001b50:	68ec      	ldreq	r4, [r5, #12]
 8001b52:	e7e6      	b.n	8001b22 <__swsetup_r+0x1e>
 8001b54:	0758      	lsls	r0, r3, #29
 8001b56:	d512      	bpl.n	8001b7e <__swsetup_r+0x7a>
 8001b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b5a:	b141      	cbz	r1, 8001b6e <__swsetup_r+0x6a>
 8001b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b60:	4299      	cmp	r1, r3
 8001b62:	d002      	beq.n	8001b6a <__swsetup_r+0x66>
 8001b64:	4630      	mov	r0, r6
 8001b66:	f000 fa5b 	bl	8002020 <_free_r>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	6363      	str	r3, [r4, #52]	; 0x34
 8001b6e:	89a3      	ldrh	r3, [r4, #12]
 8001b70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b74:	81a3      	strh	r3, [r4, #12]
 8001b76:	2300      	movs	r3, #0
 8001b78:	6063      	str	r3, [r4, #4]
 8001b7a:	6923      	ldr	r3, [r4, #16]
 8001b7c:	6023      	str	r3, [r4, #0]
 8001b7e:	89a3      	ldrh	r3, [r4, #12]
 8001b80:	f043 0308 	orr.w	r3, r3, #8
 8001b84:	81a3      	strh	r3, [r4, #12]
 8001b86:	6923      	ldr	r3, [r4, #16]
 8001b88:	b94b      	cbnz	r3, 8001b9e <__swsetup_r+0x9a>
 8001b8a:	89a3      	ldrh	r3, [r4, #12]
 8001b8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b94:	d003      	beq.n	8001b9e <__swsetup_r+0x9a>
 8001b96:	4621      	mov	r1, r4
 8001b98:	4630      	mov	r0, r6
 8001b9a:	f000 fa01 	bl	8001fa0 <__smakebuf_r>
 8001b9e:	89a0      	ldrh	r0, [r4, #12]
 8001ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ba4:	f010 0301 	ands.w	r3, r0, #1
 8001ba8:	d00a      	beq.n	8001bc0 <__swsetup_r+0xbc>
 8001baa:	2300      	movs	r3, #0
 8001bac:	60a3      	str	r3, [r4, #8]
 8001bae:	6963      	ldr	r3, [r4, #20]
 8001bb0:	425b      	negs	r3, r3
 8001bb2:	61a3      	str	r3, [r4, #24]
 8001bb4:	6923      	ldr	r3, [r4, #16]
 8001bb6:	b943      	cbnz	r3, 8001bca <__swsetup_r+0xc6>
 8001bb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001bbc:	d1ba      	bne.n	8001b34 <__swsetup_r+0x30>
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}
 8001bc0:	0781      	lsls	r1, r0, #30
 8001bc2:	bf58      	it	pl
 8001bc4:	6963      	ldrpl	r3, [r4, #20]
 8001bc6:	60a3      	str	r3, [r4, #8]
 8001bc8:	e7f4      	b.n	8001bb4 <__swsetup_r+0xb0>
 8001bca:	2000      	movs	r0, #0
 8001bcc:	e7f7      	b.n	8001bbe <__swsetup_r+0xba>
 8001bce:	bf00      	nop
 8001bd0:	2000000c 	.word	0x2000000c
 8001bd4:	080023cc 	.word	0x080023cc
 8001bd8:	080023ec 	.word	0x080023ec
 8001bdc:	080023ac 	.word	0x080023ac

08001be0 <__sflush_r>:
 8001be0:	898a      	ldrh	r2, [r1, #12]
 8001be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001be6:	4605      	mov	r5, r0
 8001be8:	0710      	lsls	r0, r2, #28
 8001bea:	460c      	mov	r4, r1
 8001bec:	d458      	bmi.n	8001ca0 <__sflush_r+0xc0>
 8001bee:	684b      	ldr	r3, [r1, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	dc05      	bgt.n	8001c00 <__sflush_r+0x20>
 8001bf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	dc02      	bgt.n	8001c00 <__sflush_r+0x20>
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c02:	2e00      	cmp	r6, #0
 8001c04:	d0f9      	beq.n	8001bfa <__sflush_r+0x1a>
 8001c06:	2300      	movs	r3, #0
 8001c08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c0c:	682f      	ldr	r7, [r5, #0]
 8001c0e:	602b      	str	r3, [r5, #0]
 8001c10:	d032      	beq.n	8001c78 <__sflush_r+0x98>
 8001c12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c14:	89a3      	ldrh	r3, [r4, #12]
 8001c16:	075a      	lsls	r2, r3, #29
 8001c18:	d505      	bpl.n	8001c26 <__sflush_r+0x46>
 8001c1a:	6863      	ldr	r3, [r4, #4]
 8001c1c:	1ac0      	subs	r0, r0, r3
 8001c1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c20:	b10b      	cbz	r3, 8001c26 <__sflush_r+0x46>
 8001c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c24:	1ac0      	subs	r0, r0, r3
 8001c26:	2300      	movs	r3, #0
 8001c28:	4602      	mov	r2, r0
 8001c2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c2c:	6a21      	ldr	r1, [r4, #32]
 8001c2e:	4628      	mov	r0, r5
 8001c30:	47b0      	blx	r6
 8001c32:	1c43      	adds	r3, r0, #1
 8001c34:	89a3      	ldrh	r3, [r4, #12]
 8001c36:	d106      	bne.n	8001c46 <__sflush_r+0x66>
 8001c38:	6829      	ldr	r1, [r5, #0]
 8001c3a:	291d      	cmp	r1, #29
 8001c3c:	d82c      	bhi.n	8001c98 <__sflush_r+0xb8>
 8001c3e:	4a2a      	ldr	r2, [pc, #168]	; (8001ce8 <__sflush_r+0x108>)
 8001c40:	40ca      	lsrs	r2, r1
 8001c42:	07d6      	lsls	r6, r2, #31
 8001c44:	d528      	bpl.n	8001c98 <__sflush_r+0xb8>
 8001c46:	2200      	movs	r2, #0
 8001c48:	6062      	str	r2, [r4, #4]
 8001c4a:	04d9      	lsls	r1, r3, #19
 8001c4c:	6922      	ldr	r2, [r4, #16]
 8001c4e:	6022      	str	r2, [r4, #0]
 8001c50:	d504      	bpl.n	8001c5c <__sflush_r+0x7c>
 8001c52:	1c42      	adds	r2, r0, #1
 8001c54:	d101      	bne.n	8001c5a <__sflush_r+0x7a>
 8001c56:	682b      	ldr	r3, [r5, #0]
 8001c58:	b903      	cbnz	r3, 8001c5c <__sflush_r+0x7c>
 8001c5a:	6560      	str	r0, [r4, #84]	; 0x54
 8001c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c5e:	602f      	str	r7, [r5, #0]
 8001c60:	2900      	cmp	r1, #0
 8001c62:	d0ca      	beq.n	8001bfa <__sflush_r+0x1a>
 8001c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c68:	4299      	cmp	r1, r3
 8001c6a:	d002      	beq.n	8001c72 <__sflush_r+0x92>
 8001c6c:	4628      	mov	r0, r5
 8001c6e:	f000 f9d7 	bl	8002020 <_free_r>
 8001c72:	2000      	movs	r0, #0
 8001c74:	6360      	str	r0, [r4, #52]	; 0x34
 8001c76:	e7c1      	b.n	8001bfc <__sflush_r+0x1c>
 8001c78:	6a21      	ldr	r1, [r4, #32]
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	4628      	mov	r0, r5
 8001c7e:	47b0      	blx	r6
 8001c80:	1c41      	adds	r1, r0, #1
 8001c82:	d1c7      	bne.n	8001c14 <__sflush_r+0x34>
 8001c84:	682b      	ldr	r3, [r5, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0c4      	beq.n	8001c14 <__sflush_r+0x34>
 8001c8a:	2b1d      	cmp	r3, #29
 8001c8c:	d001      	beq.n	8001c92 <__sflush_r+0xb2>
 8001c8e:	2b16      	cmp	r3, #22
 8001c90:	d101      	bne.n	8001c96 <__sflush_r+0xb6>
 8001c92:	602f      	str	r7, [r5, #0]
 8001c94:	e7b1      	b.n	8001bfa <__sflush_r+0x1a>
 8001c96:	89a3      	ldrh	r3, [r4, #12]
 8001c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c9c:	81a3      	strh	r3, [r4, #12]
 8001c9e:	e7ad      	b.n	8001bfc <__sflush_r+0x1c>
 8001ca0:	690f      	ldr	r7, [r1, #16]
 8001ca2:	2f00      	cmp	r7, #0
 8001ca4:	d0a9      	beq.n	8001bfa <__sflush_r+0x1a>
 8001ca6:	0793      	lsls	r3, r2, #30
 8001ca8:	680e      	ldr	r6, [r1, #0]
 8001caa:	bf08      	it	eq
 8001cac:	694b      	ldreq	r3, [r1, #20]
 8001cae:	600f      	str	r7, [r1, #0]
 8001cb0:	bf18      	it	ne
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	eba6 0807 	sub.w	r8, r6, r7
 8001cb8:	608b      	str	r3, [r1, #8]
 8001cba:	f1b8 0f00 	cmp.w	r8, #0
 8001cbe:	dd9c      	ble.n	8001bfa <__sflush_r+0x1a>
 8001cc0:	6a21      	ldr	r1, [r4, #32]
 8001cc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001cc4:	4643      	mov	r3, r8
 8001cc6:	463a      	mov	r2, r7
 8001cc8:	4628      	mov	r0, r5
 8001cca:	47b0      	blx	r6
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	dc06      	bgt.n	8001cde <__sflush_r+0xfe>
 8001cd0:	89a3      	ldrh	r3, [r4, #12]
 8001cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cd6:	81a3      	strh	r3, [r4, #12]
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	e78e      	b.n	8001bfc <__sflush_r+0x1c>
 8001cde:	4407      	add	r7, r0
 8001ce0:	eba8 0800 	sub.w	r8, r8, r0
 8001ce4:	e7e9      	b.n	8001cba <__sflush_r+0xda>
 8001ce6:	bf00      	nop
 8001ce8:	20400001 	.word	0x20400001

08001cec <_fflush_r>:
 8001cec:	b538      	push	{r3, r4, r5, lr}
 8001cee:	690b      	ldr	r3, [r1, #16]
 8001cf0:	4605      	mov	r5, r0
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	b913      	cbnz	r3, 8001cfc <_fflush_r+0x10>
 8001cf6:	2500      	movs	r5, #0
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	bd38      	pop	{r3, r4, r5, pc}
 8001cfc:	b118      	cbz	r0, 8001d06 <_fflush_r+0x1a>
 8001cfe:	6983      	ldr	r3, [r0, #24]
 8001d00:	b90b      	cbnz	r3, 8001d06 <_fflush_r+0x1a>
 8001d02:	f000 f887 	bl	8001e14 <__sinit>
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <_fflush_r+0x6c>)
 8001d08:	429c      	cmp	r4, r3
 8001d0a:	d11b      	bne.n	8001d44 <_fflush_r+0x58>
 8001d0c:	686c      	ldr	r4, [r5, #4]
 8001d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0ef      	beq.n	8001cf6 <_fflush_r+0xa>
 8001d16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d18:	07d0      	lsls	r0, r2, #31
 8001d1a:	d404      	bmi.n	8001d26 <_fflush_r+0x3a>
 8001d1c:	0599      	lsls	r1, r3, #22
 8001d1e:	d402      	bmi.n	8001d26 <_fflush_r+0x3a>
 8001d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d22:	f000 f915 	bl	8001f50 <__retarget_lock_acquire_recursive>
 8001d26:	4628      	mov	r0, r5
 8001d28:	4621      	mov	r1, r4
 8001d2a:	f7ff ff59 	bl	8001be0 <__sflush_r>
 8001d2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d30:	07da      	lsls	r2, r3, #31
 8001d32:	4605      	mov	r5, r0
 8001d34:	d4e0      	bmi.n	8001cf8 <_fflush_r+0xc>
 8001d36:	89a3      	ldrh	r3, [r4, #12]
 8001d38:	059b      	lsls	r3, r3, #22
 8001d3a:	d4dd      	bmi.n	8001cf8 <_fflush_r+0xc>
 8001d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d3e:	f000 f908 	bl	8001f52 <__retarget_lock_release_recursive>
 8001d42:	e7d9      	b.n	8001cf8 <_fflush_r+0xc>
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <_fflush_r+0x70>)
 8001d46:	429c      	cmp	r4, r3
 8001d48:	d101      	bne.n	8001d4e <_fflush_r+0x62>
 8001d4a:	68ac      	ldr	r4, [r5, #8]
 8001d4c:	e7df      	b.n	8001d0e <_fflush_r+0x22>
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <_fflush_r+0x74>)
 8001d50:	429c      	cmp	r4, r3
 8001d52:	bf08      	it	eq
 8001d54:	68ec      	ldreq	r4, [r5, #12]
 8001d56:	e7da      	b.n	8001d0e <_fflush_r+0x22>
 8001d58:	080023cc 	.word	0x080023cc
 8001d5c:	080023ec 	.word	0x080023ec
 8001d60:	080023ac 	.word	0x080023ac

08001d64 <std>:
 8001d64:	2300      	movs	r3, #0
 8001d66:	b510      	push	{r4, lr}
 8001d68:	4604      	mov	r4, r0
 8001d6a:	e9c0 3300 	strd	r3, r3, [r0]
 8001d6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d72:	6083      	str	r3, [r0, #8]
 8001d74:	8181      	strh	r1, [r0, #12]
 8001d76:	6643      	str	r3, [r0, #100]	; 0x64
 8001d78:	81c2      	strh	r2, [r0, #14]
 8001d7a:	6183      	str	r3, [r0, #24]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	2208      	movs	r2, #8
 8001d80:	305c      	adds	r0, #92	; 0x5c
 8001d82:	f7ff fdef 	bl	8001964 <memset>
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <std+0x38>)
 8001d88:	6263      	str	r3, [r4, #36]	; 0x24
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <std+0x3c>)
 8001d8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <std+0x40>)
 8001d90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <std+0x44>)
 8001d94:	6224      	str	r4, [r4, #32]
 8001d96:	6323      	str	r3, [r4, #48]	; 0x30
 8001d98:	bd10      	pop	{r4, pc}
 8001d9a:	bf00      	nop
 8001d9c:	08002201 	.word	0x08002201
 8001da0:	08002223 	.word	0x08002223
 8001da4:	0800225b 	.word	0x0800225b
 8001da8:	0800227f 	.word	0x0800227f

08001dac <_cleanup_r>:
 8001dac:	4901      	ldr	r1, [pc, #4]	; (8001db4 <_cleanup_r+0x8>)
 8001dae:	f000 b8af 	b.w	8001f10 <_fwalk_reent>
 8001db2:	bf00      	nop
 8001db4:	08001ced 	.word	0x08001ced

08001db8 <__sfmoreglue>:
 8001db8:	b570      	push	{r4, r5, r6, lr}
 8001dba:	2268      	movs	r2, #104	; 0x68
 8001dbc:	1e4d      	subs	r5, r1, #1
 8001dbe:	4355      	muls	r5, r2
 8001dc0:	460e      	mov	r6, r1
 8001dc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001dc6:	f000 f997 	bl	80020f8 <_malloc_r>
 8001dca:	4604      	mov	r4, r0
 8001dcc:	b140      	cbz	r0, 8001de0 <__sfmoreglue+0x28>
 8001dce:	2100      	movs	r1, #0
 8001dd0:	e9c0 1600 	strd	r1, r6, [r0]
 8001dd4:	300c      	adds	r0, #12
 8001dd6:	60a0      	str	r0, [r4, #8]
 8001dd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ddc:	f7ff fdc2 	bl	8001964 <memset>
 8001de0:	4620      	mov	r0, r4
 8001de2:	bd70      	pop	{r4, r5, r6, pc}

08001de4 <__sfp_lock_acquire>:
 8001de4:	4801      	ldr	r0, [pc, #4]	; (8001dec <__sfp_lock_acquire+0x8>)
 8001de6:	f000 b8b3 	b.w	8001f50 <__retarget_lock_acquire_recursive>
 8001dea:	bf00      	nop
 8001dec:	2000011d 	.word	0x2000011d

08001df0 <__sfp_lock_release>:
 8001df0:	4801      	ldr	r0, [pc, #4]	; (8001df8 <__sfp_lock_release+0x8>)
 8001df2:	f000 b8ae 	b.w	8001f52 <__retarget_lock_release_recursive>
 8001df6:	bf00      	nop
 8001df8:	2000011d 	.word	0x2000011d

08001dfc <__sinit_lock_acquire>:
 8001dfc:	4801      	ldr	r0, [pc, #4]	; (8001e04 <__sinit_lock_acquire+0x8>)
 8001dfe:	f000 b8a7 	b.w	8001f50 <__retarget_lock_acquire_recursive>
 8001e02:	bf00      	nop
 8001e04:	2000011e 	.word	0x2000011e

08001e08 <__sinit_lock_release>:
 8001e08:	4801      	ldr	r0, [pc, #4]	; (8001e10 <__sinit_lock_release+0x8>)
 8001e0a:	f000 b8a2 	b.w	8001f52 <__retarget_lock_release_recursive>
 8001e0e:	bf00      	nop
 8001e10:	2000011e 	.word	0x2000011e

08001e14 <__sinit>:
 8001e14:	b510      	push	{r4, lr}
 8001e16:	4604      	mov	r4, r0
 8001e18:	f7ff fff0 	bl	8001dfc <__sinit_lock_acquire>
 8001e1c:	69a3      	ldr	r3, [r4, #24]
 8001e1e:	b11b      	cbz	r3, 8001e28 <__sinit+0x14>
 8001e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e24:	f7ff bff0 	b.w	8001e08 <__sinit_lock_release>
 8001e28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001e2c:	6523      	str	r3, [r4, #80]	; 0x50
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <__sinit+0x68>)
 8001e30:	4a13      	ldr	r2, [pc, #76]	; (8001e80 <__sinit+0x6c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	62a2      	str	r2, [r4, #40]	; 0x28
 8001e36:	42a3      	cmp	r3, r4
 8001e38:	bf04      	itt	eq
 8001e3a:	2301      	moveq	r3, #1
 8001e3c:	61a3      	streq	r3, [r4, #24]
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f000 f820 	bl	8001e84 <__sfp>
 8001e44:	6060      	str	r0, [r4, #4]
 8001e46:	4620      	mov	r0, r4
 8001e48:	f000 f81c 	bl	8001e84 <__sfp>
 8001e4c:	60a0      	str	r0, [r4, #8]
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f000 f818 	bl	8001e84 <__sfp>
 8001e54:	2200      	movs	r2, #0
 8001e56:	60e0      	str	r0, [r4, #12]
 8001e58:	2104      	movs	r1, #4
 8001e5a:	6860      	ldr	r0, [r4, #4]
 8001e5c:	f7ff ff82 	bl	8001d64 <std>
 8001e60:	68a0      	ldr	r0, [r4, #8]
 8001e62:	2201      	movs	r2, #1
 8001e64:	2109      	movs	r1, #9
 8001e66:	f7ff ff7d 	bl	8001d64 <std>
 8001e6a:	68e0      	ldr	r0, [r4, #12]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	2112      	movs	r1, #18
 8001e70:	f7ff ff78 	bl	8001d64 <std>
 8001e74:	2301      	movs	r3, #1
 8001e76:	61a3      	str	r3, [r4, #24]
 8001e78:	e7d2      	b.n	8001e20 <__sinit+0xc>
 8001e7a:	bf00      	nop
 8001e7c:	080023a8 	.word	0x080023a8
 8001e80:	08001dad 	.word	0x08001dad

08001e84 <__sfp>:
 8001e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e86:	4607      	mov	r7, r0
 8001e88:	f7ff ffac 	bl	8001de4 <__sfp_lock_acquire>
 8001e8c:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <__sfp+0x84>)
 8001e8e:	681e      	ldr	r6, [r3, #0]
 8001e90:	69b3      	ldr	r3, [r6, #24]
 8001e92:	b913      	cbnz	r3, 8001e9a <__sfp+0x16>
 8001e94:	4630      	mov	r0, r6
 8001e96:	f7ff ffbd 	bl	8001e14 <__sinit>
 8001e9a:	3648      	adds	r6, #72	; 0x48
 8001e9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	d503      	bpl.n	8001eac <__sfp+0x28>
 8001ea4:	6833      	ldr	r3, [r6, #0]
 8001ea6:	b30b      	cbz	r3, 8001eec <__sfp+0x68>
 8001ea8:	6836      	ldr	r6, [r6, #0]
 8001eaa:	e7f7      	b.n	8001e9c <__sfp+0x18>
 8001eac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001eb0:	b9d5      	cbnz	r5, 8001ee8 <__sfp+0x64>
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <__sfp+0x88>)
 8001eb4:	60e3      	str	r3, [r4, #12]
 8001eb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001eba:	6665      	str	r5, [r4, #100]	; 0x64
 8001ebc:	f000 f847 	bl	8001f4e <__retarget_lock_init_recursive>
 8001ec0:	f7ff ff96 	bl	8001df0 <__sfp_lock_release>
 8001ec4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001ec8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001ecc:	6025      	str	r5, [r4, #0]
 8001ece:	61a5      	str	r5, [r4, #24]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ed8:	f7ff fd44 	bl	8001964 <memset>
 8001edc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001ee0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ee8:	3468      	adds	r4, #104	; 0x68
 8001eea:	e7d9      	b.n	8001ea0 <__sfp+0x1c>
 8001eec:	2104      	movs	r1, #4
 8001eee:	4638      	mov	r0, r7
 8001ef0:	f7ff ff62 	bl	8001db8 <__sfmoreglue>
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	6030      	str	r0, [r6, #0]
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	d1d5      	bne.n	8001ea8 <__sfp+0x24>
 8001efc:	f7ff ff78 	bl	8001df0 <__sfp_lock_release>
 8001f00:	230c      	movs	r3, #12
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	e7ee      	b.n	8001ee4 <__sfp+0x60>
 8001f06:	bf00      	nop
 8001f08:	080023a8 	.word	0x080023a8
 8001f0c:	ffff0001 	.word	0xffff0001

08001f10 <_fwalk_reent>:
 8001f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f14:	4606      	mov	r6, r0
 8001f16:	4688      	mov	r8, r1
 8001f18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001f1c:	2700      	movs	r7, #0
 8001f1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f22:	f1b9 0901 	subs.w	r9, r9, #1
 8001f26:	d505      	bpl.n	8001f34 <_fwalk_reent+0x24>
 8001f28:	6824      	ldr	r4, [r4, #0]
 8001f2a:	2c00      	cmp	r4, #0
 8001f2c:	d1f7      	bne.n	8001f1e <_fwalk_reent+0xe>
 8001f2e:	4638      	mov	r0, r7
 8001f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f34:	89ab      	ldrh	r3, [r5, #12]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d907      	bls.n	8001f4a <_fwalk_reent+0x3a>
 8001f3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	d003      	beq.n	8001f4a <_fwalk_reent+0x3a>
 8001f42:	4629      	mov	r1, r5
 8001f44:	4630      	mov	r0, r6
 8001f46:	47c0      	blx	r8
 8001f48:	4307      	orrs	r7, r0
 8001f4a:	3568      	adds	r5, #104	; 0x68
 8001f4c:	e7e9      	b.n	8001f22 <_fwalk_reent+0x12>

08001f4e <__retarget_lock_init_recursive>:
 8001f4e:	4770      	bx	lr

08001f50 <__retarget_lock_acquire_recursive>:
 8001f50:	4770      	bx	lr

08001f52 <__retarget_lock_release_recursive>:
 8001f52:	4770      	bx	lr

08001f54 <__swhatbuf_r>:
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	460e      	mov	r6, r1
 8001f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f5c:	2900      	cmp	r1, #0
 8001f5e:	b096      	sub	sp, #88	; 0x58
 8001f60:	4614      	mov	r4, r2
 8001f62:	461d      	mov	r5, r3
 8001f64:	da08      	bge.n	8001f78 <__swhatbuf_r+0x24>
 8001f66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	602a      	str	r2, [r5, #0]
 8001f6e:	061a      	lsls	r2, r3, #24
 8001f70:	d410      	bmi.n	8001f94 <__swhatbuf_r+0x40>
 8001f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f76:	e00e      	b.n	8001f96 <__swhatbuf_r+0x42>
 8001f78:	466a      	mov	r2, sp
 8001f7a:	f000 f9a7 	bl	80022cc <_fstat_r>
 8001f7e:	2800      	cmp	r0, #0
 8001f80:	dbf1      	blt.n	8001f66 <__swhatbuf_r+0x12>
 8001f82:	9a01      	ldr	r2, [sp, #4]
 8001f84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001f88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001f8c:	425a      	negs	r2, r3
 8001f8e:	415a      	adcs	r2, r3
 8001f90:	602a      	str	r2, [r5, #0]
 8001f92:	e7ee      	b.n	8001f72 <__swhatbuf_r+0x1e>
 8001f94:	2340      	movs	r3, #64	; 0x40
 8001f96:	2000      	movs	r0, #0
 8001f98:	6023      	str	r3, [r4, #0]
 8001f9a:	b016      	add	sp, #88	; 0x58
 8001f9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001fa0 <__smakebuf_r>:
 8001fa0:	898b      	ldrh	r3, [r1, #12]
 8001fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001fa4:	079d      	lsls	r5, r3, #30
 8001fa6:	4606      	mov	r6, r0
 8001fa8:	460c      	mov	r4, r1
 8001faa:	d507      	bpl.n	8001fbc <__smakebuf_r+0x1c>
 8001fac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001fb0:	6023      	str	r3, [r4, #0]
 8001fb2:	6123      	str	r3, [r4, #16]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	6163      	str	r3, [r4, #20]
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd70      	pop	{r4, r5, r6, pc}
 8001fbc:	ab01      	add	r3, sp, #4
 8001fbe:	466a      	mov	r2, sp
 8001fc0:	f7ff ffc8 	bl	8001f54 <__swhatbuf_r>
 8001fc4:	9900      	ldr	r1, [sp, #0]
 8001fc6:	4605      	mov	r5, r0
 8001fc8:	4630      	mov	r0, r6
 8001fca:	f000 f895 	bl	80020f8 <_malloc_r>
 8001fce:	b948      	cbnz	r0, 8001fe4 <__smakebuf_r+0x44>
 8001fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fd4:	059a      	lsls	r2, r3, #22
 8001fd6:	d4ef      	bmi.n	8001fb8 <__smakebuf_r+0x18>
 8001fd8:	f023 0303 	bic.w	r3, r3, #3
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	81a3      	strh	r3, [r4, #12]
 8001fe2:	e7e3      	b.n	8001fac <__smakebuf_r+0xc>
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <__smakebuf_r+0x7c>)
 8001fe6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001fe8:	89a3      	ldrh	r3, [r4, #12]
 8001fea:	6020      	str	r0, [r4, #0]
 8001fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff0:	81a3      	strh	r3, [r4, #12]
 8001ff2:	9b00      	ldr	r3, [sp, #0]
 8001ff4:	6163      	str	r3, [r4, #20]
 8001ff6:	9b01      	ldr	r3, [sp, #4]
 8001ff8:	6120      	str	r0, [r4, #16]
 8001ffa:	b15b      	cbz	r3, 8002014 <__smakebuf_r+0x74>
 8001ffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002000:	4630      	mov	r0, r6
 8002002:	f000 f975 	bl	80022f0 <_isatty_r>
 8002006:	b128      	cbz	r0, 8002014 <__smakebuf_r+0x74>
 8002008:	89a3      	ldrh	r3, [r4, #12]
 800200a:	f023 0303 	bic.w	r3, r3, #3
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	81a3      	strh	r3, [r4, #12]
 8002014:	89a0      	ldrh	r0, [r4, #12]
 8002016:	4305      	orrs	r5, r0
 8002018:	81a5      	strh	r5, [r4, #12]
 800201a:	e7cd      	b.n	8001fb8 <__smakebuf_r+0x18>
 800201c:	08001dad 	.word	0x08001dad

08002020 <_free_r>:
 8002020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002022:	2900      	cmp	r1, #0
 8002024:	d044      	beq.n	80020b0 <_free_r+0x90>
 8002026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800202a:	9001      	str	r0, [sp, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	f1a1 0404 	sub.w	r4, r1, #4
 8002032:	bfb8      	it	lt
 8002034:	18e4      	addlt	r4, r4, r3
 8002036:	f000 f97d 	bl	8002334 <__malloc_lock>
 800203a:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <_free_r+0x94>)
 800203c:	9801      	ldr	r0, [sp, #4]
 800203e:	6813      	ldr	r3, [r2, #0]
 8002040:	b933      	cbnz	r3, 8002050 <_free_r+0x30>
 8002042:	6063      	str	r3, [r4, #4]
 8002044:	6014      	str	r4, [r2, #0]
 8002046:	b003      	add	sp, #12
 8002048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800204c:	f000 b978 	b.w	8002340 <__malloc_unlock>
 8002050:	42a3      	cmp	r3, r4
 8002052:	d908      	bls.n	8002066 <_free_r+0x46>
 8002054:	6825      	ldr	r5, [r4, #0]
 8002056:	1961      	adds	r1, r4, r5
 8002058:	428b      	cmp	r3, r1
 800205a:	bf01      	itttt	eq
 800205c:	6819      	ldreq	r1, [r3, #0]
 800205e:	685b      	ldreq	r3, [r3, #4]
 8002060:	1949      	addeq	r1, r1, r5
 8002062:	6021      	streq	r1, [r4, #0]
 8002064:	e7ed      	b.n	8002042 <_free_r+0x22>
 8002066:	461a      	mov	r2, r3
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	b10b      	cbz	r3, 8002070 <_free_r+0x50>
 800206c:	42a3      	cmp	r3, r4
 800206e:	d9fa      	bls.n	8002066 <_free_r+0x46>
 8002070:	6811      	ldr	r1, [r2, #0]
 8002072:	1855      	adds	r5, r2, r1
 8002074:	42a5      	cmp	r5, r4
 8002076:	d10b      	bne.n	8002090 <_free_r+0x70>
 8002078:	6824      	ldr	r4, [r4, #0]
 800207a:	4421      	add	r1, r4
 800207c:	1854      	adds	r4, r2, r1
 800207e:	42a3      	cmp	r3, r4
 8002080:	6011      	str	r1, [r2, #0]
 8002082:	d1e0      	bne.n	8002046 <_free_r+0x26>
 8002084:	681c      	ldr	r4, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	6053      	str	r3, [r2, #4]
 800208a:	4421      	add	r1, r4
 800208c:	6011      	str	r1, [r2, #0]
 800208e:	e7da      	b.n	8002046 <_free_r+0x26>
 8002090:	d902      	bls.n	8002098 <_free_r+0x78>
 8002092:	230c      	movs	r3, #12
 8002094:	6003      	str	r3, [r0, #0]
 8002096:	e7d6      	b.n	8002046 <_free_r+0x26>
 8002098:	6825      	ldr	r5, [r4, #0]
 800209a:	1961      	adds	r1, r4, r5
 800209c:	428b      	cmp	r3, r1
 800209e:	bf04      	itt	eq
 80020a0:	6819      	ldreq	r1, [r3, #0]
 80020a2:	685b      	ldreq	r3, [r3, #4]
 80020a4:	6063      	str	r3, [r4, #4]
 80020a6:	bf04      	itt	eq
 80020a8:	1949      	addeq	r1, r1, r5
 80020aa:	6021      	streq	r1, [r4, #0]
 80020ac:	6054      	str	r4, [r2, #4]
 80020ae:	e7ca      	b.n	8002046 <_free_r+0x26>
 80020b0:	b003      	add	sp, #12
 80020b2:	bd30      	pop	{r4, r5, pc}
 80020b4:	20000120 	.word	0x20000120

080020b8 <sbrk_aligned>:
 80020b8:	b570      	push	{r4, r5, r6, lr}
 80020ba:	4e0e      	ldr	r6, [pc, #56]	; (80020f4 <sbrk_aligned+0x3c>)
 80020bc:	460c      	mov	r4, r1
 80020be:	6831      	ldr	r1, [r6, #0]
 80020c0:	4605      	mov	r5, r0
 80020c2:	b911      	cbnz	r1, 80020ca <sbrk_aligned+0x12>
 80020c4:	f000 f88c 	bl	80021e0 <_sbrk_r>
 80020c8:	6030      	str	r0, [r6, #0]
 80020ca:	4621      	mov	r1, r4
 80020cc:	4628      	mov	r0, r5
 80020ce:	f000 f887 	bl	80021e0 <_sbrk_r>
 80020d2:	1c43      	adds	r3, r0, #1
 80020d4:	d00a      	beq.n	80020ec <sbrk_aligned+0x34>
 80020d6:	1cc4      	adds	r4, r0, #3
 80020d8:	f024 0403 	bic.w	r4, r4, #3
 80020dc:	42a0      	cmp	r0, r4
 80020de:	d007      	beq.n	80020f0 <sbrk_aligned+0x38>
 80020e0:	1a21      	subs	r1, r4, r0
 80020e2:	4628      	mov	r0, r5
 80020e4:	f000 f87c 	bl	80021e0 <_sbrk_r>
 80020e8:	3001      	adds	r0, #1
 80020ea:	d101      	bne.n	80020f0 <sbrk_aligned+0x38>
 80020ec:	f04f 34ff 	mov.w	r4, #4294967295
 80020f0:	4620      	mov	r0, r4
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
 80020f4:	20000124 	.word	0x20000124

080020f8 <_malloc_r>:
 80020f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020fc:	1ccd      	adds	r5, r1, #3
 80020fe:	f025 0503 	bic.w	r5, r5, #3
 8002102:	3508      	adds	r5, #8
 8002104:	2d0c      	cmp	r5, #12
 8002106:	bf38      	it	cc
 8002108:	250c      	movcc	r5, #12
 800210a:	2d00      	cmp	r5, #0
 800210c:	4607      	mov	r7, r0
 800210e:	db01      	blt.n	8002114 <_malloc_r+0x1c>
 8002110:	42a9      	cmp	r1, r5
 8002112:	d905      	bls.n	8002120 <_malloc_r+0x28>
 8002114:	230c      	movs	r3, #12
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	2600      	movs	r6, #0
 800211a:	4630      	mov	r0, r6
 800211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002120:	4e2e      	ldr	r6, [pc, #184]	; (80021dc <_malloc_r+0xe4>)
 8002122:	f000 f907 	bl	8002334 <__malloc_lock>
 8002126:	6833      	ldr	r3, [r6, #0]
 8002128:	461c      	mov	r4, r3
 800212a:	bb34      	cbnz	r4, 800217a <_malloc_r+0x82>
 800212c:	4629      	mov	r1, r5
 800212e:	4638      	mov	r0, r7
 8002130:	f7ff ffc2 	bl	80020b8 <sbrk_aligned>
 8002134:	1c43      	adds	r3, r0, #1
 8002136:	4604      	mov	r4, r0
 8002138:	d14d      	bne.n	80021d6 <_malloc_r+0xde>
 800213a:	6834      	ldr	r4, [r6, #0]
 800213c:	4626      	mov	r6, r4
 800213e:	2e00      	cmp	r6, #0
 8002140:	d140      	bne.n	80021c4 <_malloc_r+0xcc>
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	4631      	mov	r1, r6
 8002146:	4638      	mov	r0, r7
 8002148:	eb04 0803 	add.w	r8, r4, r3
 800214c:	f000 f848 	bl	80021e0 <_sbrk_r>
 8002150:	4580      	cmp	r8, r0
 8002152:	d13a      	bne.n	80021ca <_malloc_r+0xd2>
 8002154:	6821      	ldr	r1, [r4, #0]
 8002156:	3503      	adds	r5, #3
 8002158:	1a6d      	subs	r5, r5, r1
 800215a:	f025 0503 	bic.w	r5, r5, #3
 800215e:	3508      	adds	r5, #8
 8002160:	2d0c      	cmp	r5, #12
 8002162:	bf38      	it	cc
 8002164:	250c      	movcc	r5, #12
 8002166:	4629      	mov	r1, r5
 8002168:	4638      	mov	r0, r7
 800216a:	f7ff ffa5 	bl	80020b8 <sbrk_aligned>
 800216e:	3001      	adds	r0, #1
 8002170:	d02b      	beq.n	80021ca <_malloc_r+0xd2>
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	442b      	add	r3, r5
 8002176:	6023      	str	r3, [r4, #0]
 8002178:	e00e      	b.n	8002198 <_malloc_r+0xa0>
 800217a:	6822      	ldr	r2, [r4, #0]
 800217c:	1b52      	subs	r2, r2, r5
 800217e:	d41e      	bmi.n	80021be <_malloc_r+0xc6>
 8002180:	2a0b      	cmp	r2, #11
 8002182:	d916      	bls.n	80021b2 <_malloc_r+0xba>
 8002184:	1961      	adds	r1, r4, r5
 8002186:	42a3      	cmp	r3, r4
 8002188:	6025      	str	r5, [r4, #0]
 800218a:	bf18      	it	ne
 800218c:	6059      	strne	r1, [r3, #4]
 800218e:	6863      	ldr	r3, [r4, #4]
 8002190:	bf08      	it	eq
 8002192:	6031      	streq	r1, [r6, #0]
 8002194:	5162      	str	r2, [r4, r5]
 8002196:	604b      	str	r3, [r1, #4]
 8002198:	4638      	mov	r0, r7
 800219a:	f104 060b 	add.w	r6, r4, #11
 800219e:	f000 f8cf 	bl	8002340 <__malloc_unlock>
 80021a2:	f026 0607 	bic.w	r6, r6, #7
 80021a6:	1d23      	adds	r3, r4, #4
 80021a8:	1af2      	subs	r2, r6, r3
 80021aa:	d0b6      	beq.n	800211a <_malloc_r+0x22>
 80021ac:	1b9b      	subs	r3, r3, r6
 80021ae:	50a3      	str	r3, [r4, r2]
 80021b0:	e7b3      	b.n	800211a <_malloc_r+0x22>
 80021b2:	6862      	ldr	r2, [r4, #4]
 80021b4:	42a3      	cmp	r3, r4
 80021b6:	bf0c      	ite	eq
 80021b8:	6032      	streq	r2, [r6, #0]
 80021ba:	605a      	strne	r2, [r3, #4]
 80021bc:	e7ec      	b.n	8002198 <_malloc_r+0xa0>
 80021be:	4623      	mov	r3, r4
 80021c0:	6864      	ldr	r4, [r4, #4]
 80021c2:	e7b2      	b.n	800212a <_malloc_r+0x32>
 80021c4:	4634      	mov	r4, r6
 80021c6:	6876      	ldr	r6, [r6, #4]
 80021c8:	e7b9      	b.n	800213e <_malloc_r+0x46>
 80021ca:	230c      	movs	r3, #12
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	4638      	mov	r0, r7
 80021d0:	f000 f8b6 	bl	8002340 <__malloc_unlock>
 80021d4:	e7a1      	b.n	800211a <_malloc_r+0x22>
 80021d6:	6025      	str	r5, [r4, #0]
 80021d8:	e7de      	b.n	8002198 <_malloc_r+0xa0>
 80021da:	bf00      	nop
 80021dc:	20000120 	.word	0x20000120

080021e0 <_sbrk_r>:
 80021e0:	b538      	push	{r3, r4, r5, lr}
 80021e2:	4d06      	ldr	r5, [pc, #24]	; (80021fc <_sbrk_r+0x1c>)
 80021e4:	2300      	movs	r3, #0
 80021e6:	4604      	mov	r4, r0
 80021e8:	4608      	mov	r0, r1
 80021ea:	602b      	str	r3, [r5, #0]
 80021ec:	f7ff fb30 	bl	8001850 <_sbrk>
 80021f0:	1c43      	adds	r3, r0, #1
 80021f2:	d102      	bne.n	80021fa <_sbrk_r+0x1a>
 80021f4:	682b      	ldr	r3, [r5, #0]
 80021f6:	b103      	cbz	r3, 80021fa <_sbrk_r+0x1a>
 80021f8:	6023      	str	r3, [r4, #0]
 80021fa:	bd38      	pop	{r3, r4, r5, pc}
 80021fc:	20000128 	.word	0x20000128

08002200 <__sread>:
 8002200:	b510      	push	{r4, lr}
 8002202:	460c      	mov	r4, r1
 8002204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002208:	f000 f8a0 	bl	800234c <_read_r>
 800220c:	2800      	cmp	r0, #0
 800220e:	bfab      	itete	ge
 8002210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002212:	89a3      	ldrhlt	r3, [r4, #12]
 8002214:	181b      	addge	r3, r3, r0
 8002216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800221a:	bfac      	ite	ge
 800221c:	6563      	strge	r3, [r4, #84]	; 0x54
 800221e:	81a3      	strhlt	r3, [r4, #12]
 8002220:	bd10      	pop	{r4, pc}

08002222 <__swrite>:
 8002222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002226:	461f      	mov	r7, r3
 8002228:	898b      	ldrh	r3, [r1, #12]
 800222a:	05db      	lsls	r3, r3, #23
 800222c:	4605      	mov	r5, r0
 800222e:	460c      	mov	r4, r1
 8002230:	4616      	mov	r6, r2
 8002232:	d505      	bpl.n	8002240 <__swrite+0x1e>
 8002234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002238:	2302      	movs	r3, #2
 800223a:	2200      	movs	r2, #0
 800223c:	f000 f868 	bl	8002310 <_lseek_r>
 8002240:	89a3      	ldrh	r3, [r4, #12]
 8002242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800224a:	81a3      	strh	r3, [r4, #12]
 800224c:	4632      	mov	r2, r6
 800224e:	463b      	mov	r3, r7
 8002250:	4628      	mov	r0, r5
 8002252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002256:	f000 b817 	b.w	8002288 <_write_r>

0800225a <__sseek>:
 800225a:	b510      	push	{r4, lr}
 800225c:	460c      	mov	r4, r1
 800225e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002262:	f000 f855 	bl	8002310 <_lseek_r>
 8002266:	1c43      	adds	r3, r0, #1
 8002268:	89a3      	ldrh	r3, [r4, #12]
 800226a:	bf15      	itete	ne
 800226c:	6560      	strne	r0, [r4, #84]	; 0x54
 800226e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002276:	81a3      	strheq	r3, [r4, #12]
 8002278:	bf18      	it	ne
 800227a:	81a3      	strhne	r3, [r4, #12]
 800227c:	bd10      	pop	{r4, pc}

0800227e <__sclose>:
 800227e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002282:	f000 b813 	b.w	80022ac <_close_r>
	...

08002288 <_write_r>:
 8002288:	b538      	push	{r3, r4, r5, lr}
 800228a:	4d07      	ldr	r5, [pc, #28]	; (80022a8 <_write_r+0x20>)
 800228c:	4604      	mov	r4, r0
 800228e:	4608      	mov	r0, r1
 8002290:	4611      	mov	r1, r2
 8002292:	2200      	movs	r2, #0
 8002294:	602a      	str	r2, [r5, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	f7ff fa89 	bl	80017ae <_write>
 800229c:	1c43      	adds	r3, r0, #1
 800229e:	d102      	bne.n	80022a6 <_write_r+0x1e>
 80022a0:	682b      	ldr	r3, [r5, #0]
 80022a2:	b103      	cbz	r3, 80022a6 <_write_r+0x1e>
 80022a4:	6023      	str	r3, [r4, #0]
 80022a6:	bd38      	pop	{r3, r4, r5, pc}
 80022a8:	20000128 	.word	0x20000128

080022ac <_close_r>:
 80022ac:	b538      	push	{r3, r4, r5, lr}
 80022ae:	4d06      	ldr	r5, [pc, #24]	; (80022c8 <_close_r+0x1c>)
 80022b0:	2300      	movs	r3, #0
 80022b2:	4604      	mov	r4, r0
 80022b4:	4608      	mov	r0, r1
 80022b6:	602b      	str	r3, [r5, #0]
 80022b8:	f7ff fa95 	bl	80017e6 <_close>
 80022bc:	1c43      	adds	r3, r0, #1
 80022be:	d102      	bne.n	80022c6 <_close_r+0x1a>
 80022c0:	682b      	ldr	r3, [r5, #0]
 80022c2:	b103      	cbz	r3, 80022c6 <_close_r+0x1a>
 80022c4:	6023      	str	r3, [r4, #0]
 80022c6:	bd38      	pop	{r3, r4, r5, pc}
 80022c8:	20000128 	.word	0x20000128

080022cc <_fstat_r>:
 80022cc:	b538      	push	{r3, r4, r5, lr}
 80022ce:	4d07      	ldr	r5, [pc, #28]	; (80022ec <_fstat_r+0x20>)
 80022d0:	2300      	movs	r3, #0
 80022d2:	4604      	mov	r4, r0
 80022d4:	4608      	mov	r0, r1
 80022d6:	4611      	mov	r1, r2
 80022d8:	602b      	str	r3, [r5, #0]
 80022da:	f7ff fa90 	bl	80017fe <_fstat>
 80022de:	1c43      	adds	r3, r0, #1
 80022e0:	d102      	bne.n	80022e8 <_fstat_r+0x1c>
 80022e2:	682b      	ldr	r3, [r5, #0]
 80022e4:	b103      	cbz	r3, 80022e8 <_fstat_r+0x1c>
 80022e6:	6023      	str	r3, [r4, #0]
 80022e8:	bd38      	pop	{r3, r4, r5, pc}
 80022ea:	bf00      	nop
 80022ec:	20000128 	.word	0x20000128

080022f0 <_isatty_r>:
 80022f0:	b538      	push	{r3, r4, r5, lr}
 80022f2:	4d06      	ldr	r5, [pc, #24]	; (800230c <_isatty_r+0x1c>)
 80022f4:	2300      	movs	r3, #0
 80022f6:	4604      	mov	r4, r0
 80022f8:	4608      	mov	r0, r1
 80022fa:	602b      	str	r3, [r5, #0]
 80022fc:	f7ff fa8f 	bl	800181e <_isatty>
 8002300:	1c43      	adds	r3, r0, #1
 8002302:	d102      	bne.n	800230a <_isatty_r+0x1a>
 8002304:	682b      	ldr	r3, [r5, #0]
 8002306:	b103      	cbz	r3, 800230a <_isatty_r+0x1a>
 8002308:	6023      	str	r3, [r4, #0]
 800230a:	bd38      	pop	{r3, r4, r5, pc}
 800230c:	20000128 	.word	0x20000128

08002310 <_lseek_r>:
 8002310:	b538      	push	{r3, r4, r5, lr}
 8002312:	4d07      	ldr	r5, [pc, #28]	; (8002330 <_lseek_r+0x20>)
 8002314:	4604      	mov	r4, r0
 8002316:	4608      	mov	r0, r1
 8002318:	4611      	mov	r1, r2
 800231a:	2200      	movs	r2, #0
 800231c:	602a      	str	r2, [r5, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	f7ff fa88 	bl	8001834 <_lseek>
 8002324:	1c43      	adds	r3, r0, #1
 8002326:	d102      	bne.n	800232e <_lseek_r+0x1e>
 8002328:	682b      	ldr	r3, [r5, #0]
 800232a:	b103      	cbz	r3, 800232e <_lseek_r+0x1e>
 800232c:	6023      	str	r3, [r4, #0]
 800232e:	bd38      	pop	{r3, r4, r5, pc}
 8002330:	20000128 	.word	0x20000128

08002334 <__malloc_lock>:
 8002334:	4801      	ldr	r0, [pc, #4]	; (800233c <__malloc_lock+0x8>)
 8002336:	f7ff be0b 	b.w	8001f50 <__retarget_lock_acquire_recursive>
 800233a:	bf00      	nop
 800233c:	2000011c 	.word	0x2000011c

08002340 <__malloc_unlock>:
 8002340:	4801      	ldr	r0, [pc, #4]	; (8002348 <__malloc_unlock+0x8>)
 8002342:	f7ff be06 	b.w	8001f52 <__retarget_lock_release_recursive>
 8002346:	bf00      	nop
 8002348:	2000011c 	.word	0x2000011c

0800234c <_read_r>:
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	4d07      	ldr	r5, [pc, #28]	; (800236c <_read_r+0x20>)
 8002350:	4604      	mov	r4, r0
 8002352:	4608      	mov	r0, r1
 8002354:	4611      	mov	r1, r2
 8002356:	2200      	movs	r2, #0
 8002358:	602a      	str	r2, [r5, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	f7ff fa0a 	bl	8001774 <_read>
 8002360:	1c43      	adds	r3, r0, #1
 8002362:	d102      	bne.n	800236a <_read_r+0x1e>
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	b103      	cbz	r3, 800236a <_read_r+0x1e>
 8002368:	6023      	str	r3, [r4, #0]
 800236a:	bd38      	pop	{r3, r4, r5, pc}
 800236c:	20000128 	.word	0x20000128

08002370 <_init>:
 8002370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002372:	bf00      	nop
 8002374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002376:	bc08      	pop	{r3}
 8002378:	469e      	mov	lr, r3
 800237a:	4770      	bx	lr

0800237c <_fini>:
 800237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237e:	bf00      	nop
 8002380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002382:	bc08      	pop	{r3}
 8002384:	469e      	mov	lr, r3
 8002386:	4770      	bx	lr
