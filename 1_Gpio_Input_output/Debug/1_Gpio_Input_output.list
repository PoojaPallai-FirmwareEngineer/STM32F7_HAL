
1_Gpio_Input_output.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008a4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a6c  08000a6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a6c  08000a6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a6c  08000a6c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a6c  08000a6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a6c  08000a6c  00010a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a70  08000a70  00010a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08000a80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000a80  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000293e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000950  00000000  00000000  0002297a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000320  00000000  00000000  000232d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002b0  00000000  00000000  000235f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001450  00000000  00000000  000238a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004da9  00000000  00000000  00024cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011aecc  00000000  00000000  00029a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00144965  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ae4  00000000  00000000  001449b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000a54 	.word	0x08000a54

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08000a54 	.word	0x08000a54

08000208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 800020c:	4b0b      	ldr	r3, [pc, #44]	; (800023c <HAL_Init+0x34>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a0a      	ldr	r2, [pc, #40]	; (800023c <HAL_Init+0x34>)
 8000212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000216:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000218:	4b08      	ldr	r3, [pc, #32]	; (800023c <HAL_Init+0x34>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a07      	ldr	r2, [pc, #28]	; (800023c <HAL_Init+0x34>)
 800021e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000224:	2003      	movs	r0, #3
 8000226:	f000 f931 	bl	800048c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800022a:	200f      	movs	r0, #15
 800022c:	f000 f808 	bl	8000240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000230:	f000 fb3d 	bl	80008ae <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000234:	2300      	movs	r3, #0
}
 8000236:	4618      	mov	r0, r3
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	40023c00 	.word	0x40023c00

08000240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <HAL_InitTick+0x54>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	4b12      	ldr	r3, [pc, #72]	; (8000298 <HAL_InitTick+0x58>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	4619      	mov	r1, r3
 8000252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000256:	fbb3 f3f1 	udiv	r3, r3, r1
 800025a:	fbb2 f3f3 	udiv	r3, r2, r3
 800025e:	4618      	mov	r0, r3
 8000260:	f000 f93b 	bl	80004da <HAL_SYSTICK_Config>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800026a:	2301      	movs	r3, #1
 800026c:	e00e      	b.n	800028c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2b0f      	cmp	r3, #15
 8000272:	d80a      	bhi.n	800028a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000274:	2200      	movs	r2, #0
 8000276:	6879      	ldr	r1, [r7, #4]
 8000278:	f04f 30ff 	mov.w	r0, #4294967295
 800027c:	f000 f911 	bl	80004a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000280:	4a06      	ldr	r2, [pc, #24]	; (800029c <HAL_InitTick+0x5c>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000286:	2300      	movs	r3, #0
 8000288:	e000      	b.n	800028c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800028a:	2301      	movs	r3, #1
}
 800028c:	4618      	mov	r0, r3
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000008 	.word	0x20000008
 8000298:	20000004 	.word	0x20000004
 800029c:	20000000 	.word	0x20000000

080002a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <HAL_IncTick+0x20>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	461a      	mov	r2, r3
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_IncTick+0x24>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4413      	add	r3, r2
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <HAL_IncTick+0x24>)
 80002b2:	6013      	str	r3, [r2, #0]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	20000004 	.word	0x20000004
 80002c4:	20000028 	.word	0x20000028

080002c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  return uwTick;
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <HAL_GetTick+0x14>)
 80002ce:	681b      	ldr	r3, [r3, #0]
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	20000028 	.word	0x20000028

080002e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002e8:	f7ff ffee 	bl	80002c8 <HAL_GetTick>
 80002ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002f8:	d005      	beq.n	8000306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002fa:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <HAL_Delay+0x44>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	461a      	mov	r2, r3
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	4413      	add	r3, r2
 8000304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000306:	bf00      	nop
 8000308:	f7ff ffde 	bl	80002c8 <HAL_GetTick>
 800030c:	4602      	mov	r2, r0
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	1ad3      	subs	r3, r2, r3
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	429a      	cmp	r2, r3
 8000316:	d8f7      	bhi.n	8000308 <HAL_Delay+0x28>
  {
  }
}
 8000318:	bf00      	nop
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000004 	.word	0x20000004

08000328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	f003 0307 	and.w	r3, r3, #7
 8000336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000338:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <__NVIC_SetPriorityGrouping+0x40>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800033e:	68ba      	ldr	r2, [r7, #8]
 8000340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000344:	4013      	ands	r3, r2
 8000346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <__NVIC_SetPriorityGrouping+0x44>)
 8000352:	4313      	orrs	r3, r2
 8000354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000356:	4a04      	ldr	r2, [pc, #16]	; (8000368 <__NVIC_SetPriorityGrouping+0x40>)
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	60d3      	str	r3, [r2, #12]
}
 800035c:	bf00      	nop
 800035e:	3714      	adds	r7, #20
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	e000ed00 	.word	0xe000ed00
 800036c:	05fa0000 	.word	0x05fa0000

08000370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000374:	4b04      	ldr	r3, [pc, #16]	; (8000388 <__NVIC_GetPriorityGrouping+0x18>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	0a1b      	lsrs	r3, r3, #8
 800037a:	f003 0307 	and.w	r3, r3, #7
}
 800037e:	4618      	mov	r0, r3
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	e000ed00 	.word	0xe000ed00

0800038c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	6039      	str	r1, [r7, #0]
 8000396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039c:	2b00      	cmp	r3, #0
 800039e:	db0a      	blt.n	80003b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	490c      	ldr	r1, [pc, #48]	; (80003d8 <__NVIC_SetPriority+0x4c>)
 80003a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003aa:	0112      	lsls	r2, r2, #4
 80003ac:	b2d2      	uxtb	r2, r2
 80003ae:	440b      	add	r3, r1
 80003b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003b4:	e00a      	b.n	80003cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	b2da      	uxtb	r2, r3
 80003ba:	4908      	ldr	r1, [pc, #32]	; (80003dc <__NVIC_SetPriority+0x50>)
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	f003 030f 	and.w	r3, r3, #15
 80003c2:	3b04      	subs	r3, #4
 80003c4:	0112      	lsls	r2, r2, #4
 80003c6:	b2d2      	uxtb	r2, r2
 80003c8:	440b      	add	r3, r1
 80003ca:	761a      	strb	r2, [r3, #24]
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	e000e100 	.word	0xe000e100
 80003dc:	e000ed00 	.word	0xe000ed00

080003e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b089      	sub	sp, #36	; 0x24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f003 0307 	and.w	r3, r3, #7
 80003f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003f4:	69fb      	ldr	r3, [r7, #28]
 80003f6:	f1c3 0307 	rsb	r3, r3, #7
 80003fa:	2b04      	cmp	r3, #4
 80003fc:	bf28      	it	cs
 80003fe:	2304      	movcs	r3, #4
 8000400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000402:	69fb      	ldr	r3, [r7, #28]
 8000404:	3304      	adds	r3, #4
 8000406:	2b06      	cmp	r3, #6
 8000408:	d902      	bls.n	8000410 <NVIC_EncodePriority+0x30>
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	3b03      	subs	r3, #3
 800040e:	e000      	b.n	8000412 <NVIC_EncodePriority+0x32>
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000414:	f04f 32ff 	mov.w	r2, #4294967295
 8000418:	69bb      	ldr	r3, [r7, #24]
 800041a:	fa02 f303 	lsl.w	r3, r2, r3
 800041e:	43da      	mvns	r2, r3
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	401a      	ands	r2, r3
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000428:	f04f 31ff 	mov.w	r1, #4294967295
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	43d9      	mvns	r1, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000438:	4313      	orrs	r3, r2
         );
}
 800043a:	4618      	mov	r0, r3
 800043c:	3724      	adds	r7, #36	; 0x24
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
	...

08000448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3b01      	subs	r3, #1
 8000454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000458:	d301      	bcc.n	800045e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800045a:	2301      	movs	r3, #1
 800045c:	e00f      	b.n	800047e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800045e:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <SysTick_Config+0x40>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	3b01      	subs	r3, #1
 8000464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000466:	210f      	movs	r1, #15
 8000468:	f04f 30ff 	mov.w	r0, #4294967295
 800046c:	f7ff ff8e 	bl	800038c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <SysTick_Config+0x40>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000476:	4b04      	ldr	r3, [pc, #16]	; (8000488 <SysTick_Config+0x40>)
 8000478:	2207      	movs	r2, #7
 800047a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800047c:	2300      	movs	r3, #0
}
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	e000e010 	.word	0xe000e010

0800048c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff ff47 	bl	8000328 <__NVIC_SetPriorityGrouping>
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b086      	sub	sp, #24
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	4603      	mov	r3, r0
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	607a      	str	r2, [r7, #4]
 80004ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004b4:	f7ff ff5c 	bl	8000370 <__NVIC_GetPriorityGrouping>
 80004b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	68b9      	ldr	r1, [r7, #8]
 80004be:	6978      	ldr	r0, [r7, #20]
 80004c0:	f7ff ff8e 	bl	80003e0 <NVIC_EncodePriority>
 80004c4:	4602      	mov	r2, r0
 80004c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff5d 	bl	800038c <__NVIC_SetPriority>
}
 80004d2:	bf00      	nop
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b082      	sub	sp, #8
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f7ff ffb0 	bl	8000448 <SysTick_Config>
 80004e8:	4603      	mov	r3, r0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b089      	sub	sp, #36	; 0x24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80004fe:	2300      	movs	r3, #0
 8000500:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800050a:	2300      	movs	r3, #0
 800050c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
 8000512:	e175      	b.n	8000800 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000514:	2201      	movs	r2, #1
 8000516:	69fb      	ldr	r3, [r7, #28]
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	697a      	ldr	r2, [r7, #20]
 8000524:	4013      	ands	r3, r2
 8000526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000528:	693a      	ldr	r2, [r7, #16]
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	429a      	cmp	r2, r3
 800052e:	f040 8164 	bne.w	80007fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	f003 0303 	and.w	r3, r3, #3
 800053a:	2b01      	cmp	r3, #1
 800053c:	d005      	beq.n	800054a <HAL_GPIO_Init+0x56>
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	f003 0303 	and.w	r3, r3, #3
 8000546:	2b02      	cmp	r3, #2
 8000548:	d130      	bne.n	80005ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	2203      	movs	r2, #3
 8000556:	fa02 f303 	lsl.w	r3, r2, r3
 800055a:	43db      	mvns	r3, r3
 800055c:	69ba      	ldr	r2, [r7, #24]
 800055e:	4013      	ands	r3, r2
 8000560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	68da      	ldr	r2, [r3, #12]
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	fa02 f303 	lsl.w	r3, r2, r3
 800056e:	69ba      	ldr	r2, [r7, #24]
 8000570:	4313      	orrs	r3, r2
 8000572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	69ba      	ldr	r2, [r7, #24]
 8000578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000580:	2201      	movs	r2, #1
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
 8000588:	43db      	mvns	r3, r3
 800058a:	69ba      	ldr	r2, [r7, #24]
 800058c:	4013      	ands	r3, r2
 800058e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	091b      	lsrs	r3, r3, #4
 8000596:	f003 0201 	and.w	r2, r3, #1
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	69ba      	ldr	r2, [r7, #24]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	69ba      	ldr	r2, [r7, #24]
 80005aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	f003 0303 	and.w	r3, r3, #3
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d017      	beq.n	80005e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	2203      	movs	r2, #3
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
 80005c8:	43db      	mvns	r3, r3
 80005ca:	69ba      	ldr	r2, [r7, #24]
 80005cc:	4013      	ands	r3, r2
 80005ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	689a      	ldr	r2, [r3, #8]
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	69ba      	ldr	r2, [r7, #24]
 80005de:	4313      	orrs	r3, r2
 80005e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	69ba      	ldr	r2, [r7, #24]
 80005e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	f003 0303 	and.w	r3, r3, #3
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d123      	bne.n	800063c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	08da      	lsrs	r2, r3, #3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3208      	adds	r2, #8
 80005fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	f003 0307 	and.w	r3, r3, #7
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	220f      	movs	r2, #15
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	69ba      	ldr	r2, [r7, #24]
 8000614:	4013      	ands	r3, r2
 8000616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	691a      	ldr	r2, [r3, #16]
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	fa02 f303 	lsl.w	r3, r2, r3
 8000628:	69ba      	ldr	r2, [r7, #24]
 800062a:	4313      	orrs	r3, r2
 800062c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	08da      	lsrs	r2, r3, #3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3208      	adds	r2, #8
 8000636:	69b9      	ldr	r1, [r7, #24]
 8000638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	2203      	movs	r2, #3
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	43db      	mvns	r3, r3
 800064e:	69ba      	ldr	r2, [r7, #24]
 8000650:	4013      	ands	r3, r2
 8000652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	f003 0203 	and.w	r2, r3, #3
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	fa02 f303 	lsl.w	r3, r2, r3
 8000664:	69ba      	ldr	r2, [r7, #24]
 8000666:	4313      	orrs	r3, r2
 8000668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000678:	2b00      	cmp	r3, #0
 800067a:	f000 80be 	beq.w	80007fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067e:	4b66      	ldr	r3, [pc, #408]	; (8000818 <HAL_GPIO_Init+0x324>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	4a65      	ldr	r2, [pc, #404]	; (8000818 <HAL_GPIO_Init+0x324>)
 8000684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000688:	6453      	str	r3, [r2, #68]	; 0x44
 800068a:	4b63      	ldr	r3, [pc, #396]	; (8000818 <HAL_GPIO_Init+0x324>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000696:	4a61      	ldr	r2, [pc, #388]	; (800081c <HAL_GPIO_Init+0x328>)
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	089b      	lsrs	r3, r3, #2
 800069c:	3302      	adds	r3, #2
 800069e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	f003 0303 	and.w	r3, r3, #3
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	220f      	movs	r2, #15
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	43db      	mvns	r3, r3
 80006b4:	69ba      	ldr	r2, [r7, #24]
 80006b6:	4013      	ands	r3, r2
 80006b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4a58      	ldr	r2, [pc, #352]	; (8000820 <HAL_GPIO_Init+0x32c>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d037      	beq.n	8000732 <HAL_GPIO_Init+0x23e>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a57      	ldr	r2, [pc, #348]	; (8000824 <HAL_GPIO_Init+0x330>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d031      	beq.n	800072e <HAL_GPIO_Init+0x23a>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a56      	ldr	r2, [pc, #344]	; (8000828 <HAL_GPIO_Init+0x334>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d02b      	beq.n	800072a <HAL_GPIO_Init+0x236>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a55      	ldr	r2, [pc, #340]	; (800082c <HAL_GPIO_Init+0x338>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d025      	beq.n	8000726 <HAL_GPIO_Init+0x232>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a54      	ldr	r2, [pc, #336]	; (8000830 <HAL_GPIO_Init+0x33c>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d01f      	beq.n	8000722 <HAL_GPIO_Init+0x22e>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a53      	ldr	r2, [pc, #332]	; (8000834 <HAL_GPIO_Init+0x340>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d019      	beq.n	800071e <HAL_GPIO_Init+0x22a>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a52      	ldr	r2, [pc, #328]	; (8000838 <HAL_GPIO_Init+0x344>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d013      	beq.n	800071a <HAL_GPIO_Init+0x226>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a51      	ldr	r2, [pc, #324]	; (800083c <HAL_GPIO_Init+0x348>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d00d      	beq.n	8000716 <HAL_GPIO_Init+0x222>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a50      	ldr	r2, [pc, #320]	; (8000840 <HAL_GPIO_Init+0x34c>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d007      	beq.n	8000712 <HAL_GPIO_Init+0x21e>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a4f      	ldr	r2, [pc, #316]	; (8000844 <HAL_GPIO_Init+0x350>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d101      	bne.n	800070e <HAL_GPIO_Init+0x21a>
 800070a:	2309      	movs	r3, #9
 800070c:	e012      	b.n	8000734 <HAL_GPIO_Init+0x240>
 800070e:	230a      	movs	r3, #10
 8000710:	e010      	b.n	8000734 <HAL_GPIO_Init+0x240>
 8000712:	2308      	movs	r3, #8
 8000714:	e00e      	b.n	8000734 <HAL_GPIO_Init+0x240>
 8000716:	2307      	movs	r3, #7
 8000718:	e00c      	b.n	8000734 <HAL_GPIO_Init+0x240>
 800071a:	2306      	movs	r3, #6
 800071c:	e00a      	b.n	8000734 <HAL_GPIO_Init+0x240>
 800071e:	2305      	movs	r3, #5
 8000720:	e008      	b.n	8000734 <HAL_GPIO_Init+0x240>
 8000722:	2304      	movs	r3, #4
 8000724:	e006      	b.n	8000734 <HAL_GPIO_Init+0x240>
 8000726:	2303      	movs	r3, #3
 8000728:	e004      	b.n	8000734 <HAL_GPIO_Init+0x240>
 800072a:	2302      	movs	r3, #2
 800072c:	e002      	b.n	8000734 <HAL_GPIO_Init+0x240>
 800072e:	2301      	movs	r3, #1
 8000730:	e000      	b.n	8000734 <HAL_GPIO_Init+0x240>
 8000732:	2300      	movs	r3, #0
 8000734:	69fa      	ldr	r2, [r7, #28]
 8000736:	f002 0203 	and.w	r2, r2, #3
 800073a:	0092      	lsls	r2, r2, #2
 800073c:	4093      	lsls	r3, r2
 800073e:	69ba      	ldr	r2, [r7, #24]
 8000740:	4313      	orrs	r3, r2
 8000742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000744:	4935      	ldr	r1, [pc, #212]	; (800081c <HAL_GPIO_Init+0x328>)
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	089b      	lsrs	r3, r3, #2
 800074a:	3302      	adds	r3, #2
 800074c:	69ba      	ldr	r2, [r7, #24]
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000752:	4b3d      	ldr	r3, [pc, #244]	; (8000848 <HAL_GPIO_Init+0x354>)
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	43db      	mvns	r3, r3
 800075c:	69ba      	ldr	r2, [r7, #24]
 800075e:	4013      	ands	r3, r2
 8000760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800076a:	2b00      	cmp	r3, #0
 800076c:	d003      	beq.n	8000776 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800076e:	69ba      	ldr	r2, [r7, #24]
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	4313      	orrs	r3, r2
 8000774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000776:	4a34      	ldr	r2, [pc, #208]	; (8000848 <HAL_GPIO_Init+0x354>)
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800077c:	4b32      	ldr	r3, [pc, #200]	; (8000848 <HAL_GPIO_Init+0x354>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	43db      	mvns	r3, r3
 8000786:	69ba      	ldr	r2, [r7, #24]
 8000788:	4013      	ands	r3, r2
 800078a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000794:	2b00      	cmp	r3, #0
 8000796:	d003      	beq.n	80007a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000798:	69ba      	ldr	r2, [r7, #24]
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	4313      	orrs	r3, r2
 800079e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80007a0:	4a29      	ldr	r2, [pc, #164]	; (8000848 <HAL_GPIO_Init+0x354>)
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <HAL_GPIO_Init+0x354>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	43db      	mvns	r3, r3
 80007b0:	69ba      	ldr	r2, [r7, #24]
 80007b2:	4013      	ands	r3, r2
 80007b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d003      	beq.n	80007ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80007c2:	69ba      	ldr	r2, [r7, #24]
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80007ca:	4a1f      	ldr	r2, [pc, #124]	; (8000848 <HAL_GPIO_Init+0x354>)
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <HAL_GPIO_Init+0x354>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	43db      	mvns	r3, r3
 80007da:	69ba      	ldr	r2, [r7, #24]
 80007dc:	4013      	ands	r3, r2
 80007de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d003      	beq.n	80007f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80007f4:	4a14      	ldr	r2, [pc, #80]	; (8000848 <HAL_GPIO_Init+0x354>)
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3301      	adds	r3, #1
 80007fe:	61fb      	str	r3, [r7, #28]
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	2b0f      	cmp	r3, #15
 8000804:	f67f ae86 	bls.w	8000514 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	3724      	adds	r7, #36	; 0x24
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40013800 	.word	0x40013800
 8000820:	40020000 	.word	0x40020000
 8000824:	40020400 	.word	0x40020400
 8000828:	40020800 	.word	0x40020800
 800082c:	40020c00 	.word	0x40020c00
 8000830:	40021000 	.word	0x40021000
 8000834:	40021400 	.word	0x40021400
 8000838:	40021800 	.word	0x40021800
 800083c:	40021c00 	.word	0x40021c00
 8000840:	40022000 	.word	0x40022000
 8000844:	40022400 	.word	0x40022400
 8000848:	40013c00 	.word	0x40013c00

0800084c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	691a      	ldr	r2, [r3, #16]
 800085c:	887b      	ldrh	r3, [r7, #2]
 800085e:	4013      	ands	r3, r2
 8000860:	2b00      	cmp	r3, #0
 8000862:	d002      	beq.n	800086a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000864:	2301      	movs	r3, #1
 8000866:	73fb      	strb	r3, [r7, #15]
 8000868:	e001      	b.n	800086e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800086e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	807b      	strh	r3, [r7, #2]
 8000888:	4613      	mov	r3, r2
 800088a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800088c:	787b      	ldrb	r3, [r7, #1]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d003      	beq.n	800089a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000892:	887a      	ldrh	r2, [r7, #2]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000898:	e003      	b.n	80008a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800089a:	887b      	ldrh	r3, [r7, #2]
 800089c:	041a      	lsls	r2, r3, #16
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	619a      	str	r2, [r3, #24]
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
 
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <main>:
void pb7_led_init(void);

uint8_t buttonstatus;

int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
    HAL_Init();
 80008c0:	f7ff fca2 	bl	8000208 <HAL_Init>
    pc13_btn_init();
 80008c4:	f000 f81c 	bl	8000900 <pc13_btn_init>
    pb7_led_init();
 80008c8:	f000 f844 	bl	8000954 <pb7_led_init>

    while(1)
    {
        // Read button state (active-low)
        buttonstatus = HAL_GPIO_ReadPin(BTN_PORT, BTN_PIN);
 80008cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d0:	4808      	ldr	r0, [pc, #32]	; (80008f4 <main+0x38>)
 80008d2:	f7ff ffbb 	bl	800084c <HAL_GPIO_ReadPin>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <main+0x3c>)
 80008dc:	701a      	strb	r2, [r3, #0]
        // LED ON when pressed, OFF when released
        // Method 1
        // HAL_GPIO_WritePin(LED_PORT, LED_PIN, (buttonstatus == GPIO_PIN_RESET) ? GPIO_PIN_RESET : GPIO_PIN_SET);

        // Method 2
        HAL_GPIO_WritePin (LED_PORT,LED_PIN,buttonstatus);
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <main+0x3c>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <main+0x40>)
 80008e8:	f7ff ffc8 	bl	800087c <HAL_GPIO_WritePin>

        HAL_Delay(50);  // Debounce and visible LED delay
 80008ec:	2032      	movs	r0, #50	; 0x32
 80008ee:	f7ff fcf7 	bl	80002e0 <HAL_Delay>
        buttonstatus = HAL_GPIO_ReadPin(BTN_PORT, BTN_PIN);
 80008f2:	e7eb      	b.n	80008cc <main+0x10>
 80008f4:	40020800 	.word	0x40020800
 80008f8:	2000002c 	.word	0x2000002c
 80008fc:	40020400 	.word	0x40020400

08000900 <pc13_btn_init>:
    }
}

void pc13_btn_init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <pc13_btn_init+0x4c>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	4a0c      	ldr	r2, [pc, #48]	; (800094c <pc13_btn_init+0x4c>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6313      	str	r3, [r2, #48]	; 0x30
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <pc13_btn_init+0x4c>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = BTN_PIN;
 800092c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000930:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(BTN_PORT, &GPIO_InitStruct);
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <pc13_btn_init+0x50>)
 8000940:	f7ff fdd8 	bl	80004f4 <HAL_GPIO_Init>
}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40020800 	.word	0x40020800

08000954 <pb7_led_init>:

void pb7_led_init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <pb7_led_init+0x50>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <pb7_led_init+0x50>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	6313      	str	r3, [r2, #48]	; 0x30
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <pb7_led_init+0x50>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000978:	f003 0302 	and.w	r3, r3, #2
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	683b      	ldr	r3, [r7, #0]

    // LED: Blue color
    GPIO_InitStruct.Pin = LED_PIN;
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <pb7_led_init+0x54>)
 8000996:	f7ff fdad 	bl	80004f4 <HAL_GPIO_Init>
}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020400 	.word	0x40020400

080009ac <SysTick_Handler>:

// Minimal SysTick handler
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80009b0:	f7ff fc76 	bl	80002a0 <HAL_IncTick>
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c2:	490d      	ldr	r1, [pc, #52]	; (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d8:	4c0a      	ldr	r4, [pc, #40]	; (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009e6:	f000 f811 	bl	8000a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ea:	f7ff ff67 	bl	80008bc <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   r0, =_estack
 80009f0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009fc:	08000a74 	.word	0x08000a74
  ldr r2, =_sbss
 8000a00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a04:	20000030 	.word	0x20000030

08000a08 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC_IRQHandler>
	...

08000a0c <__libc_init_array>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	4d0d      	ldr	r5, [pc, #52]	; (8000a44 <__libc_init_array+0x38>)
 8000a10:	4c0d      	ldr	r4, [pc, #52]	; (8000a48 <__libc_init_array+0x3c>)
 8000a12:	1b64      	subs	r4, r4, r5
 8000a14:	10a4      	asrs	r4, r4, #2
 8000a16:	2600      	movs	r6, #0
 8000a18:	42a6      	cmp	r6, r4
 8000a1a:	d109      	bne.n	8000a30 <__libc_init_array+0x24>
 8000a1c:	4d0b      	ldr	r5, [pc, #44]	; (8000a4c <__libc_init_array+0x40>)
 8000a1e:	4c0c      	ldr	r4, [pc, #48]	; (8000a50 <__libc_init_array+0x44>)
 8000a20:	f000 f818 	bl	8000a54 <_init>
 8000a24:	1b64      	subs	r4, r4, r5
 8000a26:	10a4      	asrs	r4, r4, #2
 8000a28:	2600      	movs	r6, #0
 8000a2a:	42a6      	cmp	r6, r4
 8000a2c:	d105      	bne.n	8000a3a <__libc_init_array+0x2e>
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a34:	4798      	blx	r3
 8000a36:	3601      	adds	r6, #1
 8000a38:	e7ee      	b.n	8000a18 <__libc_init_array+0xc>
 8000a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a3e:	4798      	blx	r3
 8000a40:	3601      	adds	r6, #1
 8000a42:	e7f2      	b.n	8000a2a <__libc_init_array+0x1e>
 8000a44:	08000a6c 	.word	0x08000a6c
 8000a48:	08000a6c 	.word	0x08000a6c
 8000a4c:	08000a6c 	.word	0x08000a6c
 8000a50:	08000a70 	.word	0x08000a70

08000a54 <_init>:
 8000a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a56:	bf00      	nop
 8000a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5a:	bc08      	pop	{r3}
 8000a5c:	469e      	mov	lr, r3
 8000a5e:	4770      	bx	lr

08000a60 <_fini>:
 8000a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a62:	bf00      	nop
 8000a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a66:	bc08      	pop	{r3}
 8000a68:	469e      	mov	lr, r3
 8000a6a:	4770      	bx	lr
